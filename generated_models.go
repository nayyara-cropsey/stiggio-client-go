// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package stigg

import (
	"fmt"
	"io"
	"strconv"
)

// DenyReason of get access policy
type AccessDeniedReason string

const (
	AccessDeniedReasonFeatureNotFound                    AccessDeniedReason = "FeatureNotFound"
	AccessDeniedReasonCustomerNotFound                   AccessDeniedReason = "CustomerNotFound"
	AccessDeniedReasonCustomerIsArchived                 AccessDeniedReason = "CustomerIsArchived"
	AccessDeniedReasonCustomerResourceNotFound           AccessDeniedReason = "CustomerResourceNotFound"
	AccessDeniedReasonNoActiveSubscription               AccessDeniedReason = "NoActiveSubscription"
	AccessDeniedReasonNoFeatureEntitlementInSubscription AccessDeniedReason = "NoFeatureEntitlementInSubscription"
	AccessDeniedReasonRequestedUsageExceedingLimit       AccessDeniedReason = "RequestedUsageExceedingLimit"
	AccessDeniedReasonBudgetExceeded                     AccessDeniedReason = "BudgetExceeded"
	AccessDeniedReasonUnknown                            AccessDeniedReason = "Unknown"
)

var AllAccessDeniedReason = []AccessDeniedReason{
	AccessDeniedReasonFeatureNotFound,
	AccessDeniedReasonCustomerNotFound,
	AccessDeniedReasonCustomerIsArchived,
	AccessDeniedReasonCustomerResourceNotFound,
	AccessDeniedReasonNoActiveSubscription,
	AccessDeniedReasonNoFeatureEntitlementInSubscription,
	AccessDeniedReasonRequestedUsageExceedingLimit,
	AccessDeniedReasonBudgetExceeded,
	AccessDeniedReasonUnknown,
}

func (e AccessDeniedReason) IsValid() bool {
	switch e {
	case AccessDeniedReasonFeatureNotFound, AccessDeniedReasonCustomerNotFound, AccessDeniedReasonCustomerIsArchived, AccessDeniedReasonCustomerResourceNotFound, AccessDeniedReasonNoActiveSubscription, AccessDeniedReasonNoFeatureEntitlementInSubscription, AccessDeniedReasonRequestedUsageExceedingLimit, AccessDeniedReasonBudgetExceeded, AccessDeniedReasonUnknown:
		return true
	}
	return false
}

func (e AccessDeniedReason) String() string {
	return string(e)
}

func (e *AccessDeniedReason) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccessDeniedReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccessDeniedReason", str)
	}
	return nil
}

func (e AccessDeniedReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Account access role of the user
type AccountAccessRole string

const (
	AccountAccessRoleOwner  AccountAccessRole = "OWNER"
	AccountAccessRoleMember AccountAccessRole = "MEMBER"
)

var AllAccountAccessRole = []AccountAccessRole{
	AccountAccessRoleOwner,
	AccountAccessRoleMember,
}

func (e AccountAccessRole) IsValid() bool {
	switch e {
	case AccountAccessRoleOwner, AccountAccessRoleMember:
		return true
	}
	return false
}

func (e AccountAccessRole) String() string {
	return string(e)
}

func (e *AccountAccessRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountAccessRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountAccessRole", str)
	}
	return nil
}

func (e AccountAccessRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AccountStatus string

const (
	AccountStatusBlocked AccountStatus = "BLOCKED"
	AccountStatusActive  AccountStatus = "ACTIVE"
)

var AllAccountStatus = []AccountStatus{
	AccountStatusBlocked,
	AccountStatusActive,
}

func (e AccountStatus) IsValid() bool {
	switch e {
	case AccountStatusBlocked, AccountStatusActive:
		return true
	}
	return false
}

func (e AccountStatus) String() string {
	return string(e)
}

func (e *AccountStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountStatus", str)
	}
	return nil
}

func (e AccountStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AddonSortFields string

const (
	AddonSortFieldsID            AddonSortFields = "id"
	AddonSortFieldsCreatedAt     AddonSortFields = "createdAt"
	AddonSortFieldsUpdatedAt     AddonSortFields = "updatedAt"
	AddonSortFieldsRefID         AddonSortFields = "refId"
	AddonSortFieldsBillingID     AddonSortFields = "billingId"
	AddonSortFieldsDisplayName   AddonSortFields = "displayName"
	AddonSortFieldsStatus        AddonSortFields = "status"
	AddonSortFieldsPricingType   AddonSortFields = "pricingType"
	AddonSortFieldsDescription   AddonSortFields = "description"
	AddonSortFieldsEnvironmentID AddonSortFields = "environmentId"
	AddonSortFieldsProductID     AddonSortFields = "productId"
	AddonSortFieldsIsLatest      AddonSortFields = "isLatest"
	AddonSortFieldsVersionNumber AddonSortFields = "versionNumber"
)

var AllAddonSortFields = []AddonSortFields{
	AddonSortFieldsID,
	AddonSortFieldsCreatedAt,
	AddonSortFieldsUpdatedAt,
	AddonSortFieldsRefID,
	AddonSortFieldsBillingID,
	AddonSortFieldsDisplayName,
	AddonSortFieldsStatus,
	AddonSortFieldsPricingType,
	AddonSortFieldsDescription,
	AddonSortFieldsEnvironmentID,
	AddonSortFieldsProductID,
	AddonSortFieldsIsLatest,
	AddonSortFieldsVersionNumber,
}

func (e AddonSortFields) IsValid() bool {
	switch e {
	case AddonSortFieldsID, AddonSortFieldsCreatedAt, AddonSortFieldsUpdatedAt, AddonSortFieldsRefID, AddonSortFieldsBillingID, AddonSortFieldsDisplayName, AddonSortFieldsStatus, AddonSortFieldsPricingType, AddonSortFieldsDescription, AddonSortFieldsEnvironmentID, AddonSortFieldsProductID, AddonSortFieldsIsLatest, AddonSortFieldsVersionNumber:
		return true
	}
	return false
}

func (e AddonSortFields) String() string {
	return string(e)
}

func (e *AddonSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AddonSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AddonSortFields", str)
	}
	return nil
}

func (e AddonSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Aggregation function
type AggregationFunction string

const (
	AggregationFunctionSum    AggregationFunction = "SUM"
	AggregationFunctionMax    AggregationFunction = "MAX"
	AggregationFunctionMin    AggregationFunction = "MIN"
	AggregationFunctionAvg    AggregationFunction = "AVG"
	AggregationFunctionCount  AggregationFunction = "COUNT"
	AggregationFunctionUnique AggregationFunction = "UNIQUE"
)

var AllAggregationFunction = []AggregationFunction{
	AggregationFunctionSum,
	AggregationFunctionMax,
	AggregationFunctionMin,
	AggregationFunctionAvg,
	AggregationFunctionCount,
	AggregationFunctionUnique,
}

func (e AggregationFunction) IsValid() bool {
	switch e {
	case AggregationFunctionSum, AggregationFunctionMax, AggregationFunctionMin, AggregationFunctionAvg, AggregationFunctionCount, AggregationFunctionUnique:
		return true
	}
	return false
}

func (e AggregationFunction) String() string {
	return string(e)
}

func (e *AggregationFunction) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AggregationFunction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AggregationFunction", str)
	}
	return nil
}

func (e AggregationFunction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Alignment
type Alignment string

const (
	AlignmentLeft   Alignment = "LEFT"
	AlignmentCenter Alignment = "CENTER"
	AlignmentRight  Alignment = "RIGHT"
)

var AllAlignment = []Alignment{
	AlignmentLeft,
	AlignmentCenter,
	AlignmentRight,
}

func (e Alignment) IsValid() bool {
	switch e {
	case AlignmentLeft, AlignmentCenter, AlignmentRight:
		return true
	}
	return false
}

func (e Alignment) String() string {
	return string(e)
}

func (e *Alignment) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Alignment(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Alignment", str)
	}
	return nil
}

func (e Alignment) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type APIKeySortFields string

const (
	APIKeySortFieldsID APIKeySortFields = "id"
)

var AllAPIKeySortFields = []APIKeySortFields{
	APIKeySortFieldsID,
}

func (e APIKeySortFields) IsValid() bool {
	switch e {
	case APIKeySortFieldsID:
		return true
	}
	return false
}

func (e APIKeySortFields) String() string {
	return string(e)
}

func (e *APIKeySortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = APIKeySortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ApiKeySortFields", str)
	}
	return nil
}

func (e APIKeySortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type APIKeyType string

const (
	APIKeyTypeServer     APIKeyType = "SERVER"
	APIKeyTypeClient     APIKeyType = "CLIENT"
	APIKeyTypeSalesforce APIKeyType = "SALESFORCE"
)

var AllAPIKeyType = []APIKeyType{
	APIKeyTypeServer,
	APIKeyTypeClient,
	APIKeyTypeSalesforce,
}

func (e APIKeyType) IsValid() bool {
	switch e {
	case APIKeyTypeServer, APIKeyTypeClient, APIKeyTypeSalesforce:
		return true
	}
	return false
}

func (e APIKeyType) String() string {
	return string(e)
}

func (e *APIKeyType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = APIKeyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ApiKeyType", str)
	}
	return nil
}

func (e APIKeyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Auth0 application type.
type Auth0ApplicationType string

const (
	Auth0ApplicationTypeIndividual   Auth0ApplicationType = "INDIVIDUAL"
	Auth0ApplicationTypeOrganization Auth0ApplicationType = "ORGANIZATION"
	Auth0ApplicationTypeBoth         Auth0ApplicationType = "BOTH"
)

var AllAuth0ApplicationType = []Auth0ApplicationType{
	Auth0ApplicationTypeIndividual,
	Auth0ApplicationTypeOrganization,
	Auth0ApplicationTypeBoth,
}

func (e Auth0ApplicationType) IsValid() bool {
	switch e {
	case Auth0ApplicationTypeIndividual, Auth0ApplicationTypeOrganization, Auth0ApplicationTypeBoth:
		return true
	}
	return false
}

func (e Auth0ApplicationType) String() string {
	return string(e)
}

func (e *Auth0ApplicationType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Auth0ApplicationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Auth0ApplicationType", str)
	}
	return nil
}

func (e Auth0ApplicationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BillingAnchor string

const (
	BillingAnchorSubscriptionStart               BillingAnchor = "SUBSCRIPTION_START"
	BillingAnchorStartOfTheMonth                 BillingAnchor = "START_OF_THE_MONTH"
	BillingAnchorSubscriptionsConsolidateBilling BillingAnchor = "SUBSCRIPTIONS_CONSOLIDATE_BILLING"
)

var AllBillingAnchor = []BillingAnchor{
	BillingAnchorSubscriptionStart,
	BillingAnchorStartOfTheMonth,
	BillingAnchorSubscriptionsConsolidateBilling,
}

func (e BillingAnchor) IsValid() bool {
	switch e {
	case BillingAnchorSubscriptionStart, BillingAnchorStartOfTheMonth, BillingAnchorSubscriptionsConsolidateBilling:
		return true
	}
	return false
}

func (e BillingAnchor) String() string {
	return string(e)
}

func (e *BillingAnchor) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BillingAnchor(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BillingAnchor", str)
	}
	return nil
}

func (e BillingAnchor) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Billing Cadence.
type BillingCadence string

const (
	BillingCadenceRecurring BillingCadence = "RECURRING"
	BillingCadenceOneOff    BillingCadence = "ONE_OFF"
)

var AllBillingCadence = []BillingCadence{
	BillingCadenceRecurring,
	BillingCadenceOneOff,
}

func (e BillingCadence) IsValid() bool {
	switch e {
	case BillingCadenceRecurring, BillingCadenceOneOff:
		return true
	}
	return false
}

func (e BillingCadence) String() string {
	return string(e)
}

func (e *BillingCadence) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BillingCadence(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BillingCadence", str)
	}
	return nil
}

func (e BillingCadence) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Billing model.
type BillingModel string

const (
	BillingModelFlatFee      BillingModel = "FLAT_FEE"
	BillingModelMinimumSpend BillingModel = "MINIMUM_SPEND"
	BillingModelPerUnit      BillingModel = "PER_UNIT"
	BillingModelUsageBased   BillingModel = "USAGE_BASED"
)

var AllBillingModel = []BillingModel{
	BillingModelFlatFee,
	BillingModelMinimumSpend,
	BillingModelPerUnit,
	BillingModelUsageBased,
}

func (e BillingModel) IsValid() bool {
	switch e {
	case BillingModelFlatFee, BillingModelMinimumSpend, BillingModelPerUnit, BillingModelUsageBased:
		return true
	}
	return false
}

func (e BillingModel) String() string {
	return string(e)
}

func (e *BillingModel) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BillingModel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BillingModel", str)
	}
	return nil
}

func (e BillingModel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Billing period.
type BillingPeriod string

const (
	BillingPeriodMonthly  BillingPeriod = "MONTHLY"
	BillingPeriodAnnually BillingPeriod = "ANNUALLY"
)

var AllBillingPeriod = []BillingPeriod{
	BillingPeriodMonthly,
	BillingPeriodAnnually,
}

func (e BillingPeriod) IsValid() bool {
	switch e {
	case BillingPeriodMonthly, BillingPeriodAnnually:
		return true
	}
	return false
}

func (e BillingPeriod) String() string {
	return string(e)
}

func (e *BillingPeriod) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BillingPeriod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BillingPeriod", str)
	}
	return nil
}

func (e BillingPeriod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Billing vendor identifiers
type BillingVendorIdentifier string

const (
	// Stripe billing vendor
	BillingVendorIdentifierStripe BillingVendorIdentifier = "STRIPE"
)

var AllBillingVendorIdentifier = []BillingVendorIdentifier{
	BillingVendorIdentifierStripe,
}

func (e BillingVendorIdentifier) IsValid() bool {
	switch e {
	case BillingVendorIdentifierStripe:
		return true
	}
	return false
}

func (e BillingVendorIdentifier) String() string {
	return string(e)
}

func (e *BillingVendorIdentifier) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BillingVendorIdentifier(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BillingVendorIdentifier", str)
	}
	return nil
}

func (e BillingVendorIdentifier) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ChangeType string

const (
	ChangeTypeReordered ChangeType = "REORDERED"
	ChangeTypeModified  ChangeType = "MODIFIED"
	ChangeTypeAdded     ChangeType = "ADDED"
	ChangeTypeDeleted   ChangeType = "DELETED"
)

var AllChangeType = []ChangeType{
	ChangeTypeReordered,
	ChangeTypeModified,
	ChangeTypeAdded,
	ChangeTypeDeleted,
}

func (e ChangeType) IsValid() bool {
	switch e {
	case ChangeTypeReordered, ChangeTypeModified, ChangeTypeAdded, ChangeTypeDeleted:
		return true
	}
	return false
}

func (e ChangeType) String() string {
	return string(e)
}

func (e *ChangeType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChangeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChangeType", str)
	}
	return nil
}

func (e ChangeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Condition operation
type ConditionOperation string

const (
	ConditionOperationEquals             ConditionOperation = "EQUALS"
	ConditionOperationNotEquals          ConditionOperation = "NOT_EQUALS"
	ConditionOperationGreaterThan        ConditionOperation = "GREATER_THAN"
	ConditionOperationGreaterThanOrEqual ConditionOperation = "GREATER_THAN_OR_EQUAL"
	ConditionOperationLessThan           ConditionOperation = "LESS_THAN"
	ConditionOperationLessThanOrEqual    ConditionOperation = "LESS_THAN_OR_EQUAL"
	ConditionOperationIsNull             ConditionOperation = "IS_NULL"
	ConditionOperationIsNotNull          ConditionOperation = "IS_NOT_NULL"
)

var AllConditionOperation = []ConditionOperation{
	ConditionOperationEquals,
	ConditionOperationNotEquals,
	ConditionOperationGreaterThan,
	ConditionOperationGreaterThanOrEqual,
	ConditionOperationLessThan,
	ConditionOperationLessThanOrEqual,
	ConditionOperationIsNull,
	ConditionOperationIsNotNull,
}

func (e ConditionOperation) IsValid() bool {
	switch e {
	case ConditionOperationEquals, ConditionOperationNotEquals, ConditionOperationGreaterThan, ConditionOperationGreaterThanOrEqual, ConditionOperationLessThan, ConditionOperationLessThanOrEqual, ConditionOperationIsNull, ConditionOperationIsNotNull:
		return true
	}
	return false
}

func (e ConditionOperation) String() string {
	return string(e)
}

func (e *ConditionOperation) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ConditionOperation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ConditionOperation", str)
	}
	return nil
}

func (e ConditionOperation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CouponSortFields string

const (
	CouponSortFieldsID            CouponSortFields = "id"
	CouponSortFieldsName          CouponSortFields = "name"
	CouponSortFieldsRefID         CouponSortFields = "refId"
	CouponSortFieldsDescription   CouponSortFields = "description"
	CouponSortFieldsCreatedAt     CouponSortFields = "createdAt"
	CouponSortFieldsUpdatedAt     CouponSortFields = "updatedAt"
	CouponSortFieldsEnvironmentID CouponSortFields = "environmentId"
	CouponSortFieldsType          CouponSortFields = "type"
	CouponSortFieldsStatus        CouponSortFields = "status"
	CouponSortFieldsSource        CouponSortFields = "source"
	CouponSortFieldsBillingID     CouponSortFields = "billingId"
)

var AllCouponSortFields = []CouponSortFields{
	CouponSortFieldsID,
	CouponSortFieldsName,
	CouponSortFieldsRefID,
	CouponSortFieldsDescription,
	CouponSortFieldsCreatedAt,
	CouponSortFieldsUpdatedAt,
	CouponSortFieldsEnvironmentID,
	CouponSortFieldsType,
	CouponSortFieldsStatus,
	CouponSortFieldsSource,
	CouponSortFieldsBillingID,
}

func (e CouponSortFields) IsValid() bool {
	switch e {
	case CouponSortFieldsID, CouponSortFieldsName, CouponSortFieldsRefID, CouponSortFieldsDescription, CouponSortFieldsCreatedAt, CouponSortFieldsUpdatedAt, CouponSortFieldsEnvironmentID, CouponSortFieldsType, CouponSortFieldsStatus, CouponSortFieldsSource, CouponSortFieldsBillingID:
		return true
	}
	return false
}

func (e CouponSortFields) String() string {
	return string(e)
}

func (e *CouponSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CouponSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CouponSortFields", str)
	}
	return nil
}

func (e CouponSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The source of the coupon
type CouponSource string

const (
	CouponSourceStigg      CouponSource = "STIGG"
	CouponSourceStiggAdhoc CouponSource = "STIGG_ADHOC"
	CouponSourceStripe     CouponSource = "STRIPE"
)

var AllCouponSource = []CouponSource{
	CouponSourceStigg,
	CouponSourceStiggAdhoc,
	CouponSourceStripe,
}

func (e CouponSource) IsValid() bool {
	switch e {
	case CouponSourceStigg, CouponSourceStiggAdhoc, CouponSourceStripe:
		return true
	}
	return false
}

func (e CouponSource) String() string {
	return string(e)
}

func (e *CouponSource) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CouponSource(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CouponSource", str)
	}
	return nil
}

func (e CouponSource) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of the coupon
type CouponStatus string

const (
	CouponStatusActive   CouponStatus = "ACTIVE"
	CouponStatusArchived CouponStatus = "ARCHIVED"
)

var AllCouponStatus = []CouponStatus{
	CouponStatusActive,
	CouponStatusArchived,
}

func (e CouponStatus) IsValid() bool {
	switch e {
	case CouponStatusActive, CouponStatusArchived:
		return true
	}
	return false
}

func (e CouponStatus) String() string {
	return string(e)
}

func (e *CouponStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CouponStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CouponStatus", str)
	}
	return nil
}

func (e CouponStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of the coupon
type CouponType string

const (
	CouponTypeFixed      CouponType = "FIXED"
	CouponTypePercentage CouponType = "PERCENTAGE"
)

var AllCouponType = []CouponType{
	CouponTypeFixed,
	CouponTypePercentage,
}

func (e CouponType) IsValid() bool {
	switch e {
	case CouponTypeFixed, CouponTypePercentage:
		return true
	}
	return false
}

func (e CouponType) String() string {
	return string(e)
}

func (e *CouponType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CouponType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CouponType", str)
	}
	return nil
}

func (e CouponType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Currency
type Currency string

const (
	CurrencyUsd Currency = "USD"
	CurrencyAed Currency = "AED"
	CurrencyAll Currency = "ALL"
	CurrencyAmd Currency = "AMD"
	CurrencyAng Currency = "ANG"
	CurrencyAud Currency = "AUD"
	CurrencyAwg Currency = "AWG"
	CurrencyAzn Currency = "AZN"
	CurrencyBam Currency = "BAM"
	CurrencyBbd Currency = "BBD"
	CurrencyBdt Currency = "BDT"
	CurrencyBgn Currency = "BGN"
	CurrencyBif Currency = "BIF"
	CurrencyBmd Currency = "BMD"
	CurrencyBnd Currency = "BND"
	CurrencyBsd Currency = "BSD"
	CurrencyBwp Currency = "BWP"
	CurrencyByn Currency = "BYN"
	CurrencyBzd Currency = "BZD"
	CurrencyCad Currency = "CAD"
	CurrencyCdf Currency = "CDF"
	CurrencyChf Currency = "CHF"
	CurrencyCny Currency = "CNY"
	CurrencyCzk Currency = "CZK"
	CurrencyDkk Currency = "DKK"
	CurrencyDop Currency = "DOP"
	CurrencyDzd Currency = "DZD"
	CurrencyEgp Currency = "EGP"
	CurrencyEtb Currency = "ETB"
	CurrencyEur Currency = "EUR"
	CurrencyFjd Currency = "FJD"
	CurrencyGbp Currency = "GBP"
	CurrencyGel Currency = "GEL"
	CurrencyGip Currency = "GIP"
	CurrencyGmd Currency = "GMD"
	CurrencyGyd Currency = "GYD"
	CurrencyHkd Currency = "HKD"
	CurrencyHrk Currency = "HRK"
	CurrencyHtg Currency = "HTG"
	CurrencyIDR Currency = "IDR"
	CurrencyIls Currency = "ILS"
	CurrencyInr Currency = "INR"
	CurrencyIsk Currency = "ISK"
	CurrencyJmd Currency = "JMD"
	CurrencyJpy Currency = "JPY"
	CurrencyKes Currency = "KES"
	CurrencyKgs Currency = "KGS"
	CurrencyKhr Currency = "KHR"
	CurrencyKmf Currency = "KMF"
	CurrencyKrw Currency = "KRW"
	CurrencyKyd Currency = "KYD"
	CurrencyKzt Currency = "KZT"
	CurrencyLbp Currency = "LBP"
	CurrencyLkr Currency = "LKR"
	CurrencyLrd Currency = "LRD"
	CurrencyLsl Currency = "LSL"
	CurrencyMad Currency = "MAD"
	CurrencyMdl Currency = "MDL"
	CurrencyMga Currency = "MGA"
	CurrencyMkd Currency = "MKD"
	CurrencyMmk Currency = "MMK"
	CurrencyMnt Currency = "MNT"
	CurrencyMop Currency = "MOP"
	CurrencyMro Currency = "MRO"
	CurrencyMvr Currency = "MVR"
	CurrencyMwk Currency = "MWK"
	CurrencyMxn Currency = "MXN"
	CurrencyMyr Currency = "MYR"
	CurrencyMzn Currency = "MZN"
	CurrencyNad Currency = "NAD"
	CurrencyNgn Currency = "NGN"
	CurrencyNok Currency = "NOK"
	CurrencyNpr Currency = "NPR"
	CurrencyNzd Currency = "NZD"
	CurrencyPgk Currency = "PGK"
	CurrencyPhp Currency = "PHP"
	CurrencyPkr Currency = "PKR"
	CurrencyPln Currency = "PLN"
	CurrencyQar Currency = "QAR"
	CurrencyRon Currency = "RON"
	CurrencyRsd Currency = "RSD"
	CurrencyRub Currency = "RUB"
	CurrencyRwf Currency = "RWF"
	CurrencySar Currency = "SAR"
	CurrencySbd Currency = "SBD"
	CurrencyScr Currency = "SCR"
	CurrencySek Currency = "SEK"
	CurrencySgd Currency = "SGD"
	CurrencySle Currency = "SLE"
	CurrencySll Currency = "SLL"
	CurrencySos Currency = "SOS"
	CurrencySzl Currency = "SZL"
	CurrencyThb Currency = "THB"
	CurrencyTjs Currency = "TJS"
	CurrencyTop Currency = "TOP"
	CurrencyTry Currency = "TRY"
	CurrencyTtd Currency = "TTD"
	CurrencyTzs Currency = "TZS"
	CurrencyUah Currency = "UAH"
	CurrencyUzs Currency = "UZS"
	CurrencyVnd Currency = "VND"
	CurrencyVuv Currency = "VUV"
	CurrencyWst Currency = "WST"
	CurrencyXaf Currency = "XAF"
	CurrencyXcd Currency = "XCD"
	CurrencyYer Currency = "YER"
	CurrencyZar Currency = "ZAR"
	CurrencyZmw Currency = "ZMW"
	CurrencyClp Currency = "CLP"
	CurrencyDjf Currency = "DJF"
	CurrencyGnf Currency = "GNF"
	CurrencyUgx Currency = "UGX"
	CurrencyPyg Currency = "PYG"
	CurrencyXof Currency = "XOF"
	CurrencyXpf Currency = "XPF"
)

var AllCurrency = []Currency{
	CurrencyUsd,
	CurrencyAed,
	CurrencyAll,
	CurrencyAmd,
	CurrencyAng,
	CurrencyAud,
	CurrencyAwg,
	CurrencyAzn,
	CurrencyBam,
	CurrencyBbd,
	CurrencyBdt,
	CurrencyBgn,
	CurrencyBif,
	CurrencyBmd,
	CurrencyBnd,
	CurrencyBsd,
	CurrencyBwp,
	CurrencyByn,
	CurrencyBzd,
	CurrencyCad,
	CurrencyCdf,
	CurrencyChf,
	CurrencyCny,
	CurrencyCzk,
	CurrencyDkk,
	CurrencyDop,
	CurrencyDzd,
	CurrencyEgp,
	CurrencyEtb,
	CurrencyEur,
	CurrencyFjd,
	CurrencyGbp,
	CurrencyGel,
	CurrencyGip,
	CurrencyGmd,
	CurrencyGyd,
	CurrencyHkd,
	CurrencyHrk,
	CurrencyHtg,
	CurrencyIDR,
	CurrencyIls,
	CurrencyInr,
	CurrencyIsk,
	CurrencyJmd,
	CurrencyJpy,
	CurrencyKes,
	CurrencyKgs,
	CurrencyKhr,
	CurrencyKmf,
	CurrencyKrw,
	CurrencyKyd,
	CurrencyKzt,
	CurrencyLbp,
	CurrencyLkr,
	CurrencyLrd,
	CurrencyLsl,
	CurrencyMad,
	CurrencyMdl,
	CurrencyMga,
	CurrencyMkd,
	CurrencyMmk,
	CurrencyMnt,
	CurrencyMop,
	CurrencyMro,
	CurrencyMvr,
	CurrencyMwk,
	CurrencyMxn,
	CurrencyMyr,
	CurrencyMzn,
	CurrencyNad,
	CurrencyNgn,
	CurrencyNok,
	CurrencyNpr,
	CurrencyNzd,
	CurrencyPgk,
	CurrencyPhp,
	CurrencyPkr,
	CurrencyPln,
	CurrencyQar,
	CurrencyRon,
	CurrencyRsd,
	CurrencyRub,
	CurrencyRwf,
	CurrencySar,
	CurrencySbd,
	CurrencyScr,
	CurrencySek,
	CurrencySgd,
	CurrencySle,
	CurrencySll,
	CurrencySos,
	CurrencySzl,
	CurrencyThb,
	CurrencyTjs,
	CurrencyTop,
	CurrencyTry,
	CurrencyTtd,
	CurrencyTzs,
	CurrencyUah,
	CurrencyUzs,
	CurrencyVnd,
	CurrencyVuv,
	CurrencyWst,
	CurrencyXaf,
	CurrencyXcd,
	CurrencyYer,
	CurrencyZar,
	CurrencyZmw,
	CurrencyClp,
	CurrencyDjf,
	CurrencyGnf,
	CurrencyUgx,
	CurrencyPyg,
	CurrencyXof,
	CurrencyXpf,
}

func (e Currency) IsValid() bool {
	switch e {
	case CurrencyUsd, CurrencyAed, CurrencyAll, CurrencyAmd, CurrencyAng, CurrencyAud, CurrencyAwg, CurrencyAzn, CurrencyBam, CurrencyBbd, CurrencyBdt, CurrencyBgn, CurrencyBif, CurrencyBmd, CurrencyBnd, CurrencyBsd, CurrencyBwp, CurrencyByn, CurrencyBzd, CurrencyCad, CurrencyCdf, CurrencyChf, CurrencyCny, CurrencyCzk, CurrencyDkk, CurrencyDop, CurrencyDzd, CurrencyEgp, CurrencyEtb, CurrencyEur, CurrencyFjd, CurrencyGbp, CurrencyGel, CurrencyGip, CurrencyGmd, CurrencyGyd, CurrencyHkd, CurrencyHrk, CurrencyHtg, CurrencyIDR, CurrencyIls, CurrencyInr, CurrencyIsk, CurrencyJmd, CurrencyJpy, CurrencyKes, CurrencyKgs, CurrencyKhr, CurrencyKmf, CurrencyKrw, CurrencyKyd, CurrencyKzt, CurrencyLbp, CurrencyLkr, CurrencyLrd, CurrencyLsl, CurrencyMad, CurrencyMdl, CurrencyMga, CurrencyMkd, CurrencyMmk, CurrencyMnt, CurrencyMop, CurrencyMro, CurrencyMvr, CurrencyMwk, CurrencyMxn, CurrencyMyr, CurrencyMzn, CurrencyNad, CurrencyNgn, CurrencyNok, CurrencyNpr, CurrencyNzd, CurrencyPgk, CurrencyPhp, CurrencyPkr, CurrencyPln, CurrencyQar, CurrencyRon, CurrencyRsd, CurrencyRub, CurrencyRwf, CurrencySar, CurrencySbd, CurrencyScr, CurrencySek, CurrencySgd, CurrencySle, CurrencySll, CurrencySos, CurrencySzl, CurrencyThb, CurrencyTjs, CurrencyTop, CurrencyTry, CurrencyTtd, CurrencyTzs, CurrencyUah, CurrencyUzs, CurrencyVnd, CurrencyVuv, CurrencyWst, CurrencyXaf, CurrencyXcd, CurrencyYer, CurrencyZar, CurrencyZmw, CurrencyClp, CurrencyDjf, CurrencyGnf, CurrencyUgx, CurrencyPyg, CurrencyXof, CurrencyXpf:
		return true
	}
	return false
}

func (e Currency) String() string {
	return string(e)
}

func (e *Currency) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Currency(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Currency", str)
	}
	return nil
}

func (e Currency) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CustomerResourceSortFields string

const (
	CustomerResourceSortFieldsEnvironmentID CustomerResourceSortFields = "environmentId"
	CustomerResourceSortFieldsResourceID    CustomerResourceSortFields = "resourceId"
	CustomerResourceSortFieldsCreatedAt     CustomerResourceSortFields = "createdAt"
)

var AllCustomerResourceSortFields = []CustomerResourceSortFields{
	CustomerResourceSortFieldsEnvironmentID,
	CustomerResourceSortFieldsResourceID,
	CustomerResourceSortFieldsCreatedAt,
}

func (e CustomerResourceSortFields) IsValid() bool {
	switch e {
	case CustomerResourceSortFieldsEnvironmentID, CustomerResourceSortFieldsResourceID, CustomerResourceSortFieldsCreatedAt:
		return true
	}
	return false
}

func (e CustomerResourceSortFields) String() string {
	return string(e)
}

func (e *CustomerResourceSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerResourceSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerResourceSortFields", str)
	}
	return nil
}

func (e CustomerResourceSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CustomerSortFields string

const (
	CustomerSortFieldsID                   CustomerSortFields = "id"
	CustomerSortFieldsName                 CustomerSortFields = "name"
	CustomerSortFieldsEmail                CustomerSortFields = "email"
	CustomerSortFieldsRefID                CustomerSortFields = "refId"
	CustomerSortFieldsCustomerID           CustomerSortFields = "customerId"
	CustomerSortFieldsCreatedAt            CustomerSortFields = "createdAt"
	CustomerSortFieldsUpdatedAt            CustomerSortFields = "updatedAt"
	CustomerSortFieldsDeletedAt            CustomerSortFields = "deletedAt"
	CustomerSortFieldsEnvironmentID        CustomerSortFields = "environmentId"
	CustomerSortFieldsBillingID            CustomerSortFields = "billingId"
	CustomerSortFieldsCrmID                CustomerSortFields = "crmId"
	CustomerSortFieldsCrmHubspotCompanyID  CustomerSortFields = "crmHubspotCompanyId"
	CustomerSortFieldsCrmHubspotCompanyURL CustomerSortFields = "crmHubspotCompanyUrl"
	CustomerSortFieldsSearchQuery          CustomerSortFields = "searchQuery"
)

var AllCustomerSortFields = []CustomerSortFields{
	CustomerSortFieldsID,
	CustomerSortFieldsName,
	CustomerSortFieldsEmail,
	CustomerSortFieldsRefID,
	CustomerSortFieldsCustomerID,
	CustomerSortFieldsCreatedAt,
	CustomerSortFieldsUpdatedAt,
	CustomerSortFieldsDeletedAt,
	CustomerSortFieldsEnvironmentID,
	CustomerSortFieldsBillingID,
	CustomerSortFieldsCrmID,
	CustomerSortFieldsCrmHubspotCompanyID,
	CustomerSortFieldsCrmHubspotCompanyURL,
	CustomerSortFieldsSearchQuery,
}

func (e CustomerSortFields) IsValid() bool {
	switch e {
	case CustomerSortFieldsID, CustomerSortFieldsName, CustomerSortFieldsEmail, CustomerSortFieldsRefID, CustomerSortFieldsCustomerID, CustomerSortFieldsCreatedAt, CustomerSortFieldsUpdatedAt, CustomerSortFieldsDeletedAt, CustomerSortFieldsEnvironmentID, CustomerSortFieldsBillingID, CustomerSortFieldsCrmID, CustomerSortFieldsCrmHubspotCompanyID, CustomerSortFieldsCrmHubspotCompanyURL, CustomerSortFieldsSearchQuery:
		return true
	}
	return false
}

func (e CustomerSortFields) String() string {
	return string(e)
}

func (e *CustomerSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerSortFields", str)
	}
	return nil
}

func (e CustomerSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CustomerSubscriptionSortFields string

const (
	CustomerSubscriptionSortFieldsEnvironmentID             CustomerSubscriptionSortFields = "environmentId"
	CustomerSubscriptionSortFieldsID                        CustomerSubscriptionSortFields = "id"
	CustomerSubscriptionSortFieldsCreatedAt                 CustomerSubscriptionSortFields = "createdAt"
	CustomerSubscriptionSortFieldsStartDate                 CustomerSubscriptionSortFields = "startDate"
	CustomerSubscriptionSortFieldsEndDate                   CustomerSubscriptionSortFields = "endDate"
	CustomerSubscriptionSortFieldsCancellationDate          CustomerSubscriptionSortFields = "cancellationDate"
	CustomerSubscriptionSortFieldsTrialEndDate              CustomerSubscriptionSortFields = "trialEndDate"
	CustomerSubscriptionSortFieldsEffectiveEndDate          CustomerSubscriptionSortFields = "effectiveEndDate"
	CustomerSubscriptionSortFieldsBillingCycleAnchor        CustomerSubscriptionSortFields = "billingCycleAnchor"
	CustomerSubscriptionSortFieldsBillingID                 CustomerSubscriptionSortFields = "billingId"
	CustomerSubscriptionSortFieldsOldBillingID              CustomerSubscriptionSortFields = "oldBillingId"
	CustomerSubscriptionSortFieldsCrmID                     CustomerSubscriptionSortFields = "crmId"
	CustomerSubscriptionSortFieldsCrmLinkURL                CustomerSubscriptionSortFields = "crmLinkUrl"
	CustomerSubscriptionSortFieldsStatus                    CustomerSubscriptionSortFields = "status"
	CustomerSubscriptionSortFieldsCancelReason              CustomerSubscriptionSortFields = "cancelReason"
	CustomerSubscriptionSortFieldsRefID                     CustomerSubscriptionSortFields = "refId"
	CustomerSubscriptionSortFieldsSubscriptionID            CustomerSubscriptionSortFields = "subscriptionId"
	CustomerSubscriptionSortFieldsCustomerID                CustomerSubscriptionSortFields = "customerId"
	CustomerSubscriptionSortFieldsPayingCustomerID          CustomerSubscriptionSortFields = "payingCustomerId"
	CustomerSubscriptionSortFieldsResourceID                CustomerSubscriptionSortFields = "resourceId"
	CustomerSubscriptionSortFieldsCurrentBillingPeriodStart CustomerSubscriptionSortFields = "currentBillingPeriodStart"
	CustomerSubscriptionSortFieldsCurrentBillingPeriodEnd   CustomerSubscriptionSortFields = "currentBillingPeriodEnd"
	CustomerSubscriptionSortFieldsPricingType               CustomerSubscriptionSortFields = "pricingType"
	CustomerSubscriptionSortFieldsPaymentCollection         CustomerSubscriptionSortFields = "paymentCollection"
)

var AllCustomerSubscriptionSortFields = []CustomerSubscriptionSortFields{
	CustomerSubscriptionSortFieldsEnvironmentID,
	CustomerSubscriptionSortFieldsID,
	CustomerSubscriptionSortFieldsCreatedAt,
	CustomerSubscriptionSortFieldsStartDate,
	CustomerSubscriptionSortFieldsEndDate,
	CustomerSubscriptionSortFieldsCancellationDate,
	CustomerSubscriptionSortFieldsTrialEndDate,
	CustomerSubscriptionSortFieldsEffectiveEndDate,
	CustomerSubscriptionSortFieldsBillingCycleAnchor,
	CustomerSubscriptionSortFieldsBillingID,
	CustomerSubscriptionSortFieldsOldBillingID,
	CustomerSubscriptionSortFieldsCrmID,
	CustomerSubscriptionSortFieldsCrmLinkURL,
	CustomerSubscriptionSortFieldsStatus,
	CustomerSubscriptionSortFieldsCancelReason,
	CustomerSubscriptionSortFieldsRefID,
	CustomerSubscriptionSortFieldsSubscriptionID,
	CustomerSubscriptionSortFieldsCustomerID,
	CustomerSubscriptionSortFieldsPayingCustomerID,
	CustomerSubscriptionSortFieldsResourceID,
	CustomerSubscriptionSortFieldsCurrentBillingPeriodStart,
	CustomerSubscriptionSortFieldsCurrentBillingPeriodEnd,
	CustomerSubscriptionSortFieldsPricingType,
	CustomerSubscriptionSortFieldsPaymentCollection,
}

func (e CustomerSubscriptionSortFields) IsValid() bool {
	switch e {
	case CustomerSubscriptionSortFieldsEnvironmentID, CustomerSubscriptionSortFieldsID, CustomerSubscriptionSortFieldsCreatedAt, CustomerSubscriptionSortFieldsStartDate, CustomerSubscriptionSortFieldsEndDate, CustomerSubscriptionSortFieldsCancellationDate, CustomerSubscriptionSortFieldsTrialEndDate, CustomerSubscriptionSortFieldsEffectiveEndDate, CustomerSubscriptionSortFieldsBillingCycleAnchor, CustomerSubscriptionSortFieldsBillingID, CustomerSubscriptionSortFieldsOldBillingID, CustomerSubscriptionSortFieldsCrmID, CustomerSubscriptionSortFieldsCrmLinkURL, CustomerSubscriptionSortFieldsStatus, CustomerSubscriptionSortFieldsCancelReason, CustomerSubscriptionSortFieldsRefID, CustomerSubscriptionSortFieldsSubscriptionID, CustomerSubscriptionSortFieldsCustomerID, CustomerSubscriptionSortFieldsPayingCustomerID, CustomerSubscriptionSortFieldsResourceID, CustomerSubscriptionSortFieldsCurrentBillingPeriodStart, CustomerSubscriptionSortFieldsCurrentBillingPeriodEnd, CustomerSubscriptionSortFieldsPricingType, CustomerSubscriptionSortFieldsPaymentCollection:
		return true
	}
	return false
}

func (e CustomerSubscriptionSortFields) String() string {
	return string(e)
}

func (e *CustomerSubscriptionSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerSubscriptionSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerSubscriptionSortFields", str)
	}
	return nil
}

func (e CustomerSubscriptionSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Department string

const (
	DepartmentEngineering  Department = "ENGINEERING"
	DepartmentProduct      Department = "PRODUCT"
	DepartmentGrowth       Department = "GROWTH"
	DepartmentMarketing    Department = "MARKETING"
	DepartmentMonetization Department = "MONETIZATION"
	DepartmentCeoOrFounder Department = "CEO_OR_FOUNDER"
	DepartmentOther        Department = "OTHER"
)

var AllDepartment = []Department{
	DepartmentEngineering,
	DepartmentProduct,
	DepartmentGrowth,
	DepartmentMarketing,
	DepartmentMonetization,
	DepartmentCeoOrFounder,
	DepartmentOther,
}

func (e Department) IsValid() bool {
	switch e {
	case DepartmentEngineering, DepartmentProduct, DepartmentGrowth, DepartmentMarketing, DepartmentMonetization, DepartmentCeoOrFounder, DepartmentOther:
		return true
	}
	return false
}

func (e Department) String() string {
	return string(e)
}

func (e *Department) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Department(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Department", str)
	}
	return nil
}

func (e Department) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of the discount duration
type DiscountDurationType string

const (
	DiscountDurationTypeForever   DiscountDurationType = "FOREVER"
	DiscountDurationTypeRepeating DiscountDurationType = "REPEATING"
	DiscountDurationTypeOnce      DiscountDurationType = "ONCE"
)

var AllDiscountDurationType = []DiscountDurationType{
	DiscountDurationTypeForever,
	DiscountDurationTypeRepeating,
	DiscountDurationTypeOnce,
}

func (e DiscountDurationType) IsValid() bool {
	switch e {
	case DiscountDurationTypeForever, DiscountDurationTypeRepeating, DiscountDurationTypeOnce:
		return true
	}
	return false
}

func (e DiscountDurationType) String() string {
	return string(e)
}

func (e *DiscountDurationType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountDurationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountDurationType", str)
	}
	return nil
}

func (e DiscountDurationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of the discount
type DiscountType string

const (
	DiscountTypeFixed      DiscountType = "FIXED"
	DiscountTypePercentage DiscountType = "PERCENTAGE"
)

var AllDiscountType = []DiscountType{
	DiscountTypeFixed,
	DiscountTypePercentage,
}

func (e DiscountType) IsValid() bool {
	switch e {
	case DiscountTypeFixed, DiscountTypePercentage:
		return true
	}
	return false
}

func (e DiscountType) String() string {
	return string(e)
}

func (e *DiscountType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountType", str)
	}
	return nil
}

func (e DiscountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The behavior of the entitlement
type EntitlementBehavior string

const (
	// Increment the value of the entitlement
	EntitlementBehaviorIncrement EntitlementBehavior = "Increment"
	// Override the value of the entitlement
	EntitlementBehaviorOverride EntitlementBehavior = "Override"
)

var AllEntitlementBehavior = []EntitlementBehavior{
	EntitlementBehaviorIncrement,
	EntitlementBehaviorOverride,
}

func (e EntitlementBehavior) IsValid() bool {
	switch e {
	case EntitlementBehaviorIncrement, EntitlementBehaviorOverride:
		return true
	}
	return false
}

func (e EntitlementBehavior) String() string {
	return string(e)
}

func (e *EntitlementBehavior) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EntitlementBehavior(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EntitlementBehavior", str)
	}
	return nil
}

func (e EntitlementBehavior) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Entitlement reset period.
type EntitlementResetPeriod string

const (
	EntitlementResetPeriodYear  EntitlementResetPeriod = "YEAR"
	EntitlementResetPeriodMonth EntitlementResetPeriod = "MONTH"
	EntitlementResetPeriodWeek  EntitlementResetPeriod = "WEEK"
	EntitlementResetPeriodDay   EntitlementResetPeriod = "DAY"
	EntitlementResetPeriodHour  EntitlementResetPeriod = "HOUR"
)

var AllEntitlementResetPeriod = []EntitlementResetPeriod{
	EntitlementResetPeriodYear,
	EntitlementResetPeriodMonth,
	EntitlementResetPeriodWeek,
	EntitlementResetPeriodDay,
	EntitlementResetPeriodHour,
}

func (e EntitlementResetPeriod) IsValid() bool {
	switch e {
	case EntitlementResetPeriodYear, EntitlementResetPeriodMonth, EntitlementResetPeriodWeek, EntitlementResetPeriodDay, EntitlementResetPeriodHour:
		return true
	}
	return false
}

func (e EntitlementResetPeriod) String() string {
	return string(e)
}

func (e *EntitlementResetPeriod) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EntitlementResetPeriod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EntitlementResetPeriod", str)
	}
	return nil
}

func (e EntitlementResetPeriod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EntitySelectionMode string

const (
	EntitySelectionModeBlackList EntitySelectionMode = "BLACK_LIST"
	EntitySelectionModeWhiteList EntitySelectionMode = "WHITE_LIST"
)

var AllEntitySelectionMode = []EntitySelectionMode{
	EntitySelectionModeBlackList,
	EntitySelectionModeWhiteList,
}

func (e EntitySelectionMode) IsValid() bool {
	switch e {
	case EntitySelectionModeBlackList, EntitySelectionModeWhiteList:
		return true
	}
	return false
}

func (e EntitySelectionMode) String() string {
	return string(e)
}

func (e *EntitySelectionMode) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EntitySelectionMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EntitySelectionMode", str)
	}
	return nil
}

func (e EntitySelectionMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Environment access role of the user
type EnvironmentAccessRole string

const (
	EnvironmentAccessRoleAdmin   EnvironmentAccessRole = "ADMIN"
	EnvironmentAccessRoleViewer  EnvironmentAccessRole = "VIEWER"
	EnvironmentAccessRoleSupport EnvironmentAccessRole = "SUPPORT"
	EnvironmentAccessRoleNone    EnvironmentAccessRole = "NONE"
)

var AllEnvironmentAccessRole = []EnvironmentAccessRole{
	EnvironmentAccessRoleAdmin,
	EnvironmentAccessRoleViewer,
	EnvironmentAccessRoleSupport,
	EnvironmentAccessRoleNone,
}

func (e EnvironmentAccessRole) IsValid() bool {
	switch e {
	case EnvironmentAccessRoleAdmin, EnvironmentAccessRoleViewer, EnvironmentAccessRoleSupport, EnvironmentAccessRoleNone:
		return true
	}
	return false
}

func (e EnvironmentAccessRole) String() string {
	return string(e)
}

func (e *EnvironmentAccessRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnvironmentAccessRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnvironmentAccessRole", str)
	}
	return nil
}

func (e EnvironmentAccessRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// EnvironmentProvisionStatus.
type EnvironmentProvisionStatus string

const (
	EnvironmentProvisionStatusNotProvisioned EnvironmentProvisionStatus = "NOT_PROVISIONED"
	EnvironmentProvisionStatusInProgress     EnvironmentProvisionStatus = "IN_PROGRESS"
	EnvironmentProvisionStatusFailed         EnvironmentProvisionStatus = "FAILED"
	EnvironmentProvisionStatusDone           EnvironmentProvisionStatus = "DONE"
)

var AllEnvironmentProvisionStatus = []EnvironmentProvisionStatus{
	EnvironmentProvisionStatusNotProvisioned,
	EnvironmentProvisionStatusInProgress,
	EnvironmentProvisionStatusFailed,
	EnvironmentProvisionStatusDone,
}

func (e EnvironmentProvisionStatus) IsValid() bool {
	switch e {
	case EnvironmentProvisionStatusNotProvisioned, EnvironmentProvisionStatusInProgress, EnvironmentProvisionStatusFailed, EnvironmentProvisionStatusDone:
		return true
	}
	return false
}

func (e EnvironmentProvisionStatus) String() string {
	return string(e)
}

func (e *EnvironmentProvisionStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnvironmentProvisionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnvironmentProvisionStatus", str)
	}
	return nil
}

func (e EnvironmentProvisionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EnvironmentSortFields string

const (
	EnvironmentSortFieldsID                    EnvironmentSortFields = "id"
	EnvironmentSortFieldsCreatedAt             EnvironmentSortFields = "createdAt"
	EnvironmentSortFieldsDisplayName           EnvironmentSortFields = "displayName"
	EnvironmentSortFieldsSlug                  EnvironmentSortFields = "slug"
	EnvironmentSortFieldsPermanentDeletionDate EnvironmentSortFields = "permanentDeletionDate"
)

var AllEnvironmentSortFields = []EnvironmentSortFields{
	EnvironmentSortFieldsID,
	EnvironmentSortFieldsCreatedAt,
	EnvironmentSortFieldsDisplayName,
	EnvironmentSortFieldsSlug,
	EnvironmentSortFieldsPermanentDeletionDate,
}

func (e EnvironmentSortFields) IsValid() bool {
	switch e {
	case EnvironmentSortFieldsID, EnvironmentSortFieldsCreatedAt, EnvironmentSortFieldsDisplayName, EnvironmentSortFieldsSlug, EnvironmentSortFieldsPermanentDeletionDate:
		return true
	}
	return false
}

func (e EnvironmentSortFields) String() string {
	return string(e)
}

func (e *EnvironmentSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnvironmentSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnvironmentSortFields", str)
	}
	return nil
}

func (e EnvironmentSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// EnvironmentType.
type EnvironmentType string

const (
	EnvironmentTypeProduction  EnvironmentType = "PRODUCTION"
	EnvironmentTypeDevelopment EnvironmentType = "DEVELOPMENT"
	EnvironmentTypeSandbox     EnvironmentType = "SANDBOX"
)

var AllEnvironmentType = []EnvironmentType{
	EnvironmentTypeProduction,
	EnvironmentTypeDevelopment,
	EnvironmentTypeSandbox,
}

func (e EnvironmentType) IsValid() bool {
	switch e {
	case EnvironmentTypeProduction, EnvironmentTypeDevelopment, EnvironmentTypeSandbox:
		return true
	}
	return false
}

func (e EnvironmentType) String() string {
	return string(e)
}

func (e *EnvironmentType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnvironmentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnvironmentType", str)
	}
	return nil
}

func (e EnvironmentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// error codes
type ErrorCode string

const (
	ErrorCodeRateLimitExceeded               ErrorCode = "RateLimitExceeded"
	ErrorCodeBadUserInput                    ErrorCode = "BadUserInput"
	ErrorCodeUnauthenticated                 ErrorCode = "Unauthenticated"
	ErrorCodeCustomerNotFound                ErrorCode = "CustomerNotFound"
	ErrorCodeTooManySubscriptionsPerCustomer ErrorCode = "TooManySubscriptionsPerCustomer"
	ErrorCodeCustomerResourceNotFound        ErrorCode = "CustomerResourceNotFound"
	ErrorCodeFeatureNotFound                 ErrorCode = "FeatureNotFound"
	ErrorCodeDuplicatedEntityNotAllowed      ErrorCode = "DuplicatedEntityNotAllowed"
	// Duplicate integration for same non billing vendor identifier not allowed
	ErrorCodeDuplicateIntegrationNotAllowed ErrorCode = "DuplicateIntegrationNotAllowed"
	ErrorCodeEntityIsArchivedError          ErrorCode = "EntityIsArchivedError"
	ErrorCodeIntegrityViolation             ErrorCode = "IntegrityViolation"
	ErrorCodeMemberNotFound                 ErrorCode = "MemberNotFound"
	ErrorCodePlanNotFound                   ErrorCode = "PlanNotFound"
	// Free plan can't have compatible package groups error
	ErrorCodeFreePlanCantHaveCompatiblePackageGroupError ErrorCode = "FreePlanCantHaveCompatiblePackageGroupError"
	ErrorCodePackageGroupNotFound                        ErrorCode = "PackageGroupNotFound"
	ErrorCodePromotionalEntitlementNotFoundError         ErrorCode = "PromotionalEntitlementNotFoundError"
	ErrorCodeSubscriptionMustHaveSinglePlanError         ErrorCode = "SubscriptionMustHaveSinglePlanError"
	ErrorCodeAddonNotFound                               ErrorCode = "AddonNotFound"
	// Multiple addons not found
	ErrorCodeAddonsNotFound ErrorCode = "AddonsNotFound"
	// Cannot delete an addon that is compatible with a plan
	ErrorCodeAddonIsCompatibleWithPlan ErrorCode = "AddonIsCompatibleWithPlan"
	// Cannot delete an addon that is compatible with an addon group
	ErrorCodeAddonIsCompatibleWithGroup ErrorCode = "AddonIsCompatibleWithGroup"
	// Duplicate addons provisioned error
	ErrorCodeDuplicateAddonProvisionedError       ErrorCode = "DuplicateAddonProvisionedError"
	ErrorCodeScheduledMigrationAlreadyExistsError ErrorCode = "ScheduledMigrationAlreadyExistsError"
	ErrorCodeSubscriptionAlreadyOnLatestPlanError ErrorCode = "SubscriptionAlreadyOnLatestPlanError"
	ErrorCodeEnvironmentMissing                   ErrorCode = "EnvironmentMissing"
	ErrorCodeEntityIDDifferentFromRefIDError      ErrorCode = "EntityIdDifferentFromRefIdError"
	ErrorCodeUnsupportedFeatureType               ErrorCode = "UnsupportedFeatureType"
	ErrorCodeUnsupportedVendorIdentifier          ErrorCode = "UnsupportedVendorIdentifier"
	ErrorCodeUnsupportedSubscriptionScheduleType  ErrorCode = "UnsupportedSubscriptionScheduleType"
	ErrorCodeInvalidEntitlementResetPeriod        ErrorCode = "InvalidEntitlementResetPeriod"
	ErrorCodeIncompatibleSubscriptionAddon        ErrorCode = "IncompatibleSubscriptionAddon"
	ErrorCodeUnPublishedPackage                   ErrorCode = "UnPublishedPackage"
	ErrorCodeMeteringNotAvailableForFeatureType   ErrorCode = "MeteringNotAvailableForFeatureType"
	ErrorCodeIdentityForbidden                    ErrorCode = "IdentityForbidden"
	// The authenticated customer does not match the customer in the request
	ErrorCodeAuthCustomerMismatch ErrorCode = "AuthCustomerMismatch"
	// The authenticated customer has read-only permissions and cannot perform this operation
	ErrorCodeAuthCustomerReadonly                 ErrorCode = "AuthCustomerReadonly"
	ErrorCodeFetchAllCountriesPricesNotAllowed    ErrorCode = "FetchAllCountriesPricesNotAllowed"
	ErrorCodeMemberInvitationError                ErrorCode = "MemberInvitationError"
	ErrorCodeUnexpectedError                      ErrorCode = "UnexpectedError"
	ErrorCodePlansCircularDependencyError         ErrorCode = "PlansCircularDependencyError"
	ErrorCodeNoFeatureEntitlementInSubscription   ErrorCode = "NoFeatureEntitlementInSubscription"
	ErrorCodeCheckoutIsNotSupported               ErrorCode = "CheckoutIsNotSupported"
	ErrorCodeBillingIntegrationMissing            ErrorCode = "BillingIntegrationMissing"
	ErrorCodeBillingIntegrationAlreadyExistsError ErrorCode = "BillingIntegrationAlreadyExistsError"
	ErrorCodePriceNotFound                        ErrorCode = "PriceNotFound"
	ErrorCodeInvalidMemberDelete                  ErrorCode = "InvalidMemberDelete"
	ErrorCodePackageAlreadyPublished              ErrorCode = "PackageAlreadyPublished"
	ErrorCodeSubscriptionNotFound                 ErrorCode = "SubscriptionNotFound"
	ErrorCodeDraftPlanCantBeArchived              ErrorCode = "DraftPlanCantBeArchived"
	// Draft addon cannot be archived
	ErrorCodeDraftAddonCantBeArchived                         ErrorCode = "DraftAddonCantBeArchived"
	ErrorCodePlanWithChildCantBeDeleted                       ErrorCode = "PlanWithChildCantBeDeleted"
	ErrorCodePlanCannotBePublishWhenBasePlanIsDraft           ErrorCode = "PlanCannotBePublishWhenBasePlanIsDraft"
	ErrorCodePlanCannotBePublishWhenCompatibleAddonIsDraft    ErrorCode = "PlanCannotBePublishWhenCompatibleAddonIsDraft"
	ErrorCodePlanIsUsedAsDefaultStartPlan                     ErrorCode = "PlanIsUsedAsDefaultStartPlan"
	ErrorCodePlanIsUsedAsDowngradePlan                        ErrorCode = "PlanIsUsedAsDowngradePlan"
	ErrorCodeInvalidAddressError                              ErrorCode = "InvalidAddressError"
	ErrorCodeInvalidQuantity                                  ErrorCode = "InvalidQuantity"
	ErrorCodeBillingPeriodMissingError                        ErrorCode = "BillingPeriodMissingError"
	ErrorCodeDowngradeBillingPeriodNotSupportedError          ErrorCode = "DowngradeBillingPeriodNotSupportedError"
	ErrorCodeCustomerAlreadyUsesCoupon                        ErrorCode = "CustomerAlreadyUsesCoupon"
	ErrorCodeCustomerAlreadyHaveCustomerCoupon                ErrorCode = "CustomerAlreadyHaveCustomerCoupon"
	ErrorCodeSubscriptionAlreadyCanceledOrExpired             ErrorCode = "SubscriptionAlreadyCanceledOrExpired"
	ErrorCodeTrialMustBeCancelledImmediately                  ErrorCode = "TrialMustBeCancelledImmediately"
	ErrorCodeSubscriptionDoesNotHaveBillingPeriod             ErrorCode = "SubscriptionDoesNotHaveBillingPeriod"
	ErrorCodeInvalidCancellationDate                          ErrorCode = "InvalidCancellationDate"
	ErrorCodeFailedToImportCustomer                           ErrorCode = "FailedToImportCustomer"
	ErrorCodePackagePricingTypeNotSet                         ErrorCode = "PackagePricingTypeNotSet"
	ErrorCodeInvalidSubscriptionStatus                        ErrorCode = "InvalidSubscriptionStatus"
	ErrorCodeInvalidArgumentError                             ErrorCode = "InvalidArgumentError"
	ErrorCodeEditAllowedOnDraftPackageOnlyError               ErrorCode = "EditAllowedOnDraftPackageOnlyError"
	ErrorCodeIntegrationNotFound                              ErrorCode = "IntegrationNotFound"
	ErrorCodeResyncAlreadyInProgress                          ErrorCode = "ResyncAlreadyInProgress"
	ErrorCodeCouponNotFound                                   ErrorCode = "CouponNotFound"
	ErrorCodeArchivedCouponCantBeApplied                      ErrorCode = "ArchivedCouponCantBeApplied"
	ErrorCodeImportAlreadyInProgress                          ErrorCode = "ImportAlreadyInProgress"
	ErrorCodeCustomerNoBillingID                              ErrorCode = "CustomerNoBillingId"
	ErrorCodeSubscriptionNoBillingID                          ErrorCode = "SubscriptionNoBillingId"
	ErrorCodeStripeCustomerIsDeleted                          ErrorCode = "StripeCustomerIsDeleted"
	ErrorCodeInitStripePaymentMethodError                     ErrorCode = "InitStripePaymentMethodError"
	ErrorCodePreparePaymentMethodFormError                    ErrorCode = "PreparePaymentMethodFormError"
	ErrorCodeAddonHasToHavePriceError                         ErrorCode = "AddonHasToHavePriceError"
	ErrorCodeSelectedBillingModelDoesntMatchImportedItemError ErrorCode = "SelectedBillingModelDoesntMatchImportedItemError"
	ErrorCodeCannotDeleteProductError                         ErrorCode = "CannotDeleteProductError"
	ErrorCodeCannotDeleteCustomerError                        ErrorCode = "CannotDeleteCustomerError"
	ErrorCodeCannotRemovePaymentMethodFromCustomerError       ErrorCode = "CannotRemovePaymentMethodFromCustomerError"
	ErrorCodeCannotDeleteFeatureError                         ErrorCode = "CannotDeleteFeatureError"
	ErrorCodeCannotArchiveFeatureError                        ErrorCode = "CannotArchiveFeatureError"
	ErrorCodeInvalidUpdatePriceUnitAmountError                ErrorCode = "InvalidUpdatePriceUnitAmountError"
	ErrorCodeAccountNotFoundError                             ErrorCode = "AccountNotFoundError"
	ErrorCodeExperimentNotFoundError                          ErrorCode = "ExperimentNotFoundError"
	ErrorCodeExperimentAlreadyRunning                         ErrorCode = "ExperimentAlreadyRunning"
	ErrorCodeExperimentStatusError                            ErrorCode = "ExperimentStatusError"
	ErrorCodeOperationNotAllowedDuringInProgressExperiment    ErrorCode = "OperationNotAllowedDuringInProgressExperiment"
	ErrorCodeEntitlementsMustBelongToSamePackage              ErrorCode = "EntitlementsMustBelongToSamePackage"
	ErrorCodeMeterMustBeAssociatedToMeteredFeature            ErrorCode = "MeterMustBeAssociatedToMeteredFeature"
	ErrorCodeCannotEditPackageInNonDraftMode                  ErrorCode = "CannotEditPackageInNonDraftMode"
	// Cannot add override entitlement to a plan
	ErrorCodeCannotAddOverrideEntitlementToPlan            ErrorCode = "CannotAddOverrideEntitlementToPlan"
	ErrorCodeMissingEntityIDError                          ErrorCode = "MissingEntityIdError"
	ErrorCodeNoProductsAvailable                           ErrorCode = "NoProductsAvailable"
	ErrorCodePromotionCodeNotFound                         ErrorCode = "PromotionCodeNotFound"
	ErrorCodePromotionCodeNotForCustomer                   ErrorCode = "PromotionCodeNotForCustomer"
	ErrorCodePromotionCodeNotActive                        ErrorCode = "PromotionCodeNotActive"
	ErrorCodePromotionCodeMaxRedemptionsReached            ErrorCode = "PromotionCodeMaxRedemptionsReached"
	ErrorCodePromotionCodeMinimumAmountNotReached          ErrorCode = "PromotionCodeMinimumAmountNotReached"
	ErrorCodePromotionCodeCustomerNotFirstPurchase         ErrorCode = "PromotionCodeCustomerNotFirstPurchase"
	ErrorCodeFailedToCreateCheckoutSessionError            ErrorCode = "FailedToCreateCheckoutSessionError"
	ErrorCodeAddonWithDraftCannotBeDeletedError            ErrorCode = "AddonWithDraftCannotBeDeletedError"
	ErrorCodePaymentMethodNotFoundError                    ErrorCode = "PaymentMethodNotFoundError"
	ErrorCodeStripeError                                   ErrorCode = "StripeError"
	ErrorCodeCannotReportUsageForEntitlementWithMeterError ErrorCode = "CannotReportUsageForEntitlementWithMeterError"
	ErrorCodeRecalculateEntitlementsError                  ErrorCode = "RecalculateEntitlementsError"
	ErrorCodeImportSubscriptionsBulkError                  ErrorCode = "ImportSubscriptionsBulkError"
	ErrorCodeInvalidMetadataError                          ErrorCode = "InvalidMetadataError"
	ErrorCodeCannotUpsertToPackageThatHasDraft             ErrorCode = "CannotUpsertToPackageThatHasDraft"
	ErrorCodeIntegrationValidationError                    ErrorCode = "IntegrationValidationError"
	ErrorCodeAWSMarketplaceIntegrationValidationError      ErrorCode = "AwsMarketplaceIntegrationValidationError"
	ErrorCodeAWSMarketplaceIntegrationError                ErrorCode = "AwsMarketplaceIntegrationError"
	ErrorCodeHubspotIntegrationError                       ErrorCode = "HubspotIntegrationError"
	ErrorCodeDuplicateProductValidationError               ErrorCode = "DuplicateProductValidationError"
	ErrorCodeAmountTooLarge                                ErrorCode = "AmountTooLarge"
	ErrorCodeCustomerHasNoEmailAddress                     ErrorCode = "CustomerHasNoEmailAddress"
	ErrorCodeMergeEnvironmentValidationError               ErrorCode = "MergeEnvironmentValidationError"
	ErrorCodeEntitlementLimitExceededError                 ErrorCode = "EntitlementLimitExceededError"
	ErrorCodeEntitlementUsageOutOfRangeError               ErrorCode = "EntitlementUsageOutOfRangeError"
	// This account has no access to the requested feature
	ErrorCodeNoFeatureEntitlementError           ErrorCode = "NoFeatureEntitlementError"
	ErrorCodeUsageMeasurementDiffOutOfRangeError ErrorCode = "UsageMeasurementDiffOutOfRangeError"
	ErrorCodeProductNotFoundError                ErrorCode = "ProductNotFoundError"
	// Addon quantity exceeds limit error
	ErrorCodeAddonQuantityExceedsLimitError ErrorCode = "AddonQuantityExceedsLimitError"
	// Addon dependency missing error
	ErrorCodeAddonDependencyMissingError ErrorCode = "AddonDependencyMissingError"
	// Package group min items error
	ErrorCodePackageGroupMinItemsError       ErrorCode = "PackageGroupMinItemsError"
	ErrorCodeMissingSubscriptionInvoiceError ErrorCode = "MissingSubscriptionInvoiceError"
	ErrorCodeSubscriptionInvoiceStatusError  ErrorCode = "SubscriptionInvoiceStatusError"
	// Can not update unit transformation since this feature has connected active subscriptions
	ErrorCodeCannotUpdateUnitTransformationError ErrorCode = "CannotUpdateUnitTransformationError"
	// Single subscription product cannot be a target of auto-cancellation rules
	ErrorCodeSingleSubscriptionCantBeAutoCancellationTargetError ErrorCode = "SingleSubscriptionCantBeAutoCancellationTargetError"
	// Multi subscription product cannot be a source of auto-cancellation rules
	ErrorCodeMultiSubscriptionCantBeAutoCancellationSourceError ErrorCode = "MultiSubscriptionCantBeAutoCancellationSourceError"
	// Changing paying customer is not supported
	ErrorCodeChangingPayingCustomerIsNotSupportedError ErrorCode = "ChangingPayingCustomerIsNotSupportedError"
	ErrorCodeRequiredSsoAuthenticationError            ErrorCode = "RequiredSsoAuthenticationError"
	ErrorCodeAccessDeniedError                         ErrorCode = "AccessDeniedError"
	ErrorCodeInvalidDoggoSignatureError                ErrorCode = "InvalidDoggoSignatureError"
	// Deleting the default integration is not allowed
	ErrorCodeCannotDeleteDefaultIntegration ErrorCode = "CannotDeleteDefaultIntegration"
)

var AllErrorCode = []ErrorCode{
	ErrorCodeRateLimitExceeded,
	ErrorCodeBadUserInput,
	ErrorCodeUnauthenticated,
	ErrorCodeCustomerNotFound,
	ErrorCodeTooManySubscriptionsPerCustomer,
	ErrorCodeCustomerResourceNotFound,
	ErrorCodeFeatureNotFound,
	ErrorCodeDuplicatedEntityNotAllowed,
	ErrorCodeDuplicateIntegrationNotAllowed,
	ErrorCodeEntityIsArchivedError,
	ErrorCodeIntegrityViolation,
	ErrorCodeMemberNotFound,
	ErrorCodePlanNotFound,
	ErrorCodeFreePlanCantHaveCompatiblePackageGroupError,
	ErrorCodePackageGroupNotFound,
	ErrorCodePromotionalEntitlementNotFoundError,
	ErrorCodeSubscriptionMustHaveSinglePlanError,
	ErrorCodeAddonNotFound,
	ErrorCodeAddonsNotFound,
	ErrorCodeAddonIsCompatibleWithPlan,
	ErrorCodeAddonIsCompatibleWithGroup,
	ErrorCodeDuplicateAddonProvisionedError,
	ErrorCodeScheduledMigrationAlreadyExistsError,
	ErrorCodeSubscriptionAlreadyOnLatestPlanError,
	ErrorCodeEnvironmentMissing,
	ErrorCodeEntityIDDifferentFromRefIDError,
	ErrorCodeUnsupportedFeatureType,
	ErrorCodeUnsupportedVendorIdentifier,
	ErrorCodeUnsupportedSubscriptionScheduleType,
	ErrorCodeInvalidEntitlementResetPeriod,
	ErrorCodeIncompatibleSubscriptionAddon,
	ErrorCodeUnPublishedPackage,
	ErrorCodeMeteringNotAvailableForFeatureType,
	ErrorCodeIdentityForbidden,
	ErrorCodeAuthCustomerMismatch,
	ErrorCodeAuthCustomerReadonly,
	ErrorCodeFetchAllCountriesPricesNotAllowed,
	ErrorCodeMemberInvitationError,
	ErrorCodeUnexpectedError,
	ErrorCodePlansCircularDependencyError,
	ErrorCodeNoFeatureEntitlementInSubscription,
	ErrorCodeCheckoutIsNotSupported,
	ErrorCodeBillingIntegrationMissing,
	ErrorCodeBillingIntegrationAlreadyExistsError,
	ErrorCodePriceNotFound,
	ErrorCodeInvalidMemberDelete,
	ErrorCodePackageAlreadyPublished,
	ErrorCodeSubscriptionNotFound,
	ErrorCodeDraftPlanCantBeArchived,
	ErrorCodeDraftAddonCantBeArchived,
	ErrorCodePlanWithChildCantBeDeleted,
	ErrorCodePlanCannotBePublishWhenBasePlanIsDraft,
	ErrorCodePlanCannotBePublishWhenCompatibleAddonIsDraft,
	ErrorCodePlanIsUsedAsDefaultStartPlan,
	ErrorCodePlanIsUsedAsDowngradePlan,
	ErrorCodeInvalidAddressError,
	ErrorCodeInvalidQuantity,
	ErrorCodeBillingPeriodMissingError,
	ErrorCodeDowngradeBillingPeriodNotSupportedError,
	ErrorCodeCustomerAlreadyUsesCoupon,
	ErrorCodeCustomerAlreadyHaveCustomerCoupon,
	ErrorCodeSubscriptionAlreadyCanceledOrExpired,
	ErrorCodeTrialMustBeCancelledImmediately,
	ErrorCodeSubscriptionDoesNotHaveBillingPeriod,
	ErrorCodeInvalidCancellationDate,
	ErrorCodeFailedToImportCustomer,
	ErrorCodePackagePricingTypeNotSet,
	ErrorCodeInvalidSubscriptionStatus,
	ErrorCodeInvalidArgumentError,
	ErrorCodeEditAllowedOnDraftPackageOnlyError,
	ErrorCodeIntegrationNotFound,
	ErrorCodeResyncAlreadyInProgress,
	ErrorCodeCouponNotFound,
	ErrorCodeArchivedCouponCantBeApplied,
	ErrorCodeImportAlreadyInProgress,
	ErrorCodeCustomerNoBillingID,
	ErrorCodeSubscriptionNoBillingID,
	ErrorCodeStripeCustomerIsDeleted,
	ErrorCodeInitStripePaymentMethodError,
	ErrorCodePreparePaymentMethodFormError,
	ErrorCodeAddonHasToHavePriceError,
	ErrorCodeSelectedBillingModelDoesntMatchImportedItemError,
	ErrorCodeCannotDeleteProductError,
	ErrorCodeCannotDeleteCustomerError,
	ErrorCodeCannotRemovePaymentMethodFromCustomerError,
	ErrorCodeCannotDeleteFeatureError,
	ErrorCodeCannotArchiveFeatureError,
	ErrorCodeInvalidUpdatePriceUnitAmountError,
	ErrorCodeAccountNotFoundError,
	ErrorCodeExperimentNotFoundError,
	ErrorCodeExperimentAlreadyRunning,
	ErrorCodeExperimentStatusError,
	ErrorCodeOperationNotAllowedDuringInProgressExperiment,
	ErrorCodeEntitlementsMustBelongToSamePackage,
	ErrorCodeMeterMustBeAssociatedToMeteredFeature,
	ErrorCodeCannotEditPackageInNonDraftMode,
	ErrorCodeCannotAddOverrideEntitlementToPlan,
	ErrorCodeMissingEntityIDError,
	ErrorCodeNoProductsAvailable,
	ErrorCodePromotionCodeNotFound,
	ErrorCodePromotionCodeNotForCustomer,
	ErrorCodePromotionCodeNotActive,
	ErrorCodePromotionCodeMaxRedemptionsReached,
	ErrorCodePromotionCodeMinimumAmountNotReached,
	ErrorCodePromotionCodeCustomerNotFirstPurchase,
	ErrorCodeFailedToCreateCheckoutSessionError,
	ErrorCodeAddonWithDraftCannotBeDeletedError,
	ErrorCodePaymentMethodNotFoundError,
	ErrorCodeStripeError,
	ErrorCodeCannotReportUsageForEntitlementWithMeterError,
	ErrorCodeRecalculateEntitlementsError,
	ErrorCodeImportSubscriptionsBulkError,
	ErrorCodeInvalidMetadataError,
	ErrorCodeCannotUpsertToPackageThatHasDraft,
	ErrorCodeIntegrationValidationError,
	ErrorCodeAWSMarketplaceIntegrationValidationError,
	ErrorCodeAWSMarketplaceIntegrationError,
	ErrorCodeHubspotIntegrationError,
	ErrorCodeDuplicateProductValidationError,
	ErrorCodeAmountTooLarge,
	ErrorCodeCustomerHasNoEmailAddress,
	ErrorCodeMergeEnvironmentValidationError,
	ErrorCodeEntitlementLimitExceededError,
	ErrorCodeEntitlementUsageOutOfRangeError,
	ErrorCodeNoFeatureEntitlementError,
	ErrorCodeUsageMeasurementDiffOutOfRangeError,
	ErrorCodeProductNotFoundError,
	ErrorCodeAddonQuantityExceedsLimitError,
	ErrorCodeAddonDependencyMissingError,
	ErrorCodePackageGroupMinItemsError,
	ErrorCodeMissingSubscriptionInvoiceError,
	ErrorCodeSubscriptionInvoiceStatusError,
	ErrorCodeCannotUpdateUnitTransformationError,
	ErrorCodeSingleSubscriptionCantBeAutoCancellationTargetError,
	ErrorCodeMultiSubscriptionCantBeAutoCancellationSourceError,
	ErrorCodeChangingPayingCustomerIsNotSupportedError,
	ErrorCodeRequiredSsoAuthenticationError,
	ErrorCodeAccessDeniedError,
	ErrorCodeInvalidDoggoSignatureError,
	ErrorCodeCannotDeleteDefaultIntegration,
}

func (e ErrorCode) IsValid() bool {
	switch e {
	case ErrorCodeRateLimitExceeded, ErrorCodeBadUserInput, ErrorCodeUnauthenticated, ErrorCodeCustomerNotFound, ErrorCodeTooManySubscriptionsPerCustomer, ErrorCodeCustomerResourceNotFound, ErrorCodeFeatureNotFound, ErrorCodeDuplicatedEntityNotAllowed, ErrorCodeDuplicateIntegrationNotAllowed, ErrorCodeEntityIsArchivedError, ErrorCodeIntegrityViolation, ErrorCodeMemberNotFound, ErrorCodePlanNotFound, ErrorCodeFreePlanCantHaveCompatiblePackageGroupError, ErrorCodePackageGroupNotFound, ErrorCodePromotionalEntitlementNotFoundError, ErrorCodeSubscriptionMustHaveSinglePlanError, ErrorCodeAddonNotFound, ErrorCodeAddonsNotFound, ErrorCodeAddonIsCompatibleWithPlan, ErrorCodeAddonIsCompatibleWithGroup, ErrorCodeDuplicateAddonProvisionedError, ErrorCodeScheduledMigrationAlreadyExistsError, ErrorCodeSubscriptionAlreadyOnLatestPlanError, ErrorCodeEnvironmentMissing, ErrorCodeEntityIDDifferentFromRefIDError, ErrorCodeUnsupportedFeatureType, ErrorCodeUnsupportedVendorIdentifier, ErrorCodeUnsupportedSubscriptionScheduleType, ErrorCodeInvalidEntitlementResetPeriod, ErrorCodeIncompatibleSubscriptionAddon, ErrorCodeUnPublishedPackage, ErrorCodeMeteringNotAvailableForFeatureType, ErrorCodeIdentityForbidden, ErrorCodeAuthCustomerMismatch, ErrorCodeAuthCustomerReadonly, ErrorCodeFetchAllCountriesPricesNotAllowed, ErrorCodeMemberInvitationError, ErrorCodeUnexpectedError, ErrorCodePlansCircularDependencyError, ErrorCodeNoFeatureEntitlementInSubscription, ErrorCodeCheckoutIsNotSupported, ErrorCodeBillingIntegrationMissing, ErrorCodeBillingIntegrationAlreadyExistsError, ErrorCodePriceNotFound, ErrorCodeInvalidMemberDelete, ErrorCodePackageAlreadyPublished, ErrorCodeSubscriptionNotFound, ErrorCodeDraftPlanCantBeArchived, ErrorCodeDraftAddonCantBeArchived, ErrorCodePlanWithChildCantBeDeleted, ErrorCodePlanCannotBePublishWhenBasePlanIsDraft, ErrorCodePlanCannotBePublishWhenCompatibleAddonIsDraft, ErrorCodePlanIsUsedAsDefaultStartPlan, ErrorCodePlanIsUsedAsDowngradePlan, ErrorCodeInvalidAddressError, ErrorCodeInvalidQuantity, ErrorCodeBillingPeriodMissingError, ErrorCodeDowngradeBillingPeriodNotSupportedError, ErrorCodeCustomerAlreadyUsesCoupon, ErrorCodeCustomerAlreadyHaveCustomerCoupon, ErrorCodeSubscriptionAlreadyCanceledOrExpired, ErrorCodeTrialMustBeCancelledImmediately, ErrorCodeSubscriptionDoesNotHaveBillingPeriod, ErrorCodeInvalidCancellationDate, ErrorCodeFailedToImportCustomer, ErrorCodePackagePricingTypeNotSet, ErrorCodeInvalidSubscriptionStatus, ErrorCodeInvalidArgumentError, ErrorCodeEditAllowedOnDraftPackageOnlyError, ErrorCodeIntegrationNotFound, ErrorCodeResyncAlreadyInProgress, ErrorCodeCouponNotFound, ErrorCodeArchivedCouponCantBeApplied, ErrorCodeImportAlreadyInProgress, ErrorCodeCustomerNoBillingID, ErrorCodeSubscriptionNoBillingID, ErrorCodeStripeCustomerIsDeleted, ErrorCodeInitStripePaymentMethodError, ErrorCodePreparePaymentMethodFormError, ErrorCodeAddonHasToHavePriceError, ErrorCodeSelectedBillingModelDoesntMatchImportedItemError, ErrorCodeCannotDeleteProductError, ErrorCodeCannotDeleteCustomerError, ErrorCodeCannotRemovePaymentMethodFromCustomerError, ErrorCodeCannotDeleteFeatureError, ErrorCodeCannotArchiveFeatureError, ErrorCodeInvalidUpdatePriceUnitAmountError, ErrorCodeAccountNotFoundError, ErrorCodeExperimentNotFoundError, ErrorCodeExperimentAlreadyRunning, ErrorCodeExperimentStatusError, ErrorCodeOperationNotAllowedDuringInProgressExperiment, ErrorCodeEntitlementsMustBelongToSamePackage, ErrorCodeMeterMustBeAssociatedToMeteredFeature, ErrorCodeCannotEditPackageInNonDraftMode, ErrorCodeCannotAddOverrideEntitlementToPlan, ErrorCodeMissingEntityIDError, ErrorCodeNoProductsAvailable, ErrorCodePromotionCodeNotFound, ErrorCodePromotionCodeNotForCustomer, ErrorCodePromotionCodeNotActive, ErrorCodePromotionCodeMaxRedemptionsReached, ErrorCodePromotionCodeMinimumAmountNotReached, ErrorCodePromotionCodeCustomerNotFirstPurchase, ErrorCodeFailedToCreateCheckoutSessionError, ErrorCodeAddonWithDraftCannotBeDeletedError, ErrorCodePaymentMethodNotFoundError, ErrorCodeStripeError, ErrorCodeCannotReportUsageForEntitlementWithMeterError, ErrorCodeRecalculateEntitlementsError, ErrorCodeImportSubscriptionsBulkError, ErrorCodeInvalidMetadataError, ErrorCodeCannotUpsertToPackageThatHasDraft, ErrorCodeIntegrationValidationError, ErrorCodeAWSMarketplaceIntegrationValidationError, ErrorCodeAWSMarketplaceIntegrationError, ErrorCodeHubspotIntegrationError, ErrorCodeDuplicateProductValidationError, ErrorCodeAmountTooLarge, ErrorCodeCustomerHasNoEmailAddress, ErrorCodeMergeEnvironmentValidationError, ErrorCodeEntitlementLimitExceededError, ErrorCodeEntitlementUsageOutOfRangeError, ErrorCodeNoFeatureEntitlementError, ErrorCodeUsageMeasurementDiffOutOfRangeError, ErrorCodeProductNotFoundError, ErrorCodeAddonQuantityExceedsLimitError, ErrorCodeAddonDependencyMissingError, ErrorCodePackageGroupMinItemsError, ErrorCodeMissingSubscriptionInvoiceError, ErrorCodeSubscriptionInvoiceStatusError, ErrorCodeCannotUpdateUnitTransformationError, ErrorCodeSingleSubscriptionCantBeAutoCancellationTargetError, ErrorCodeMultiSubscriptionCantBeAutoCancellationSourceError, ErrorCodeChangingPayingCustomerIsNotSupportedError, ErrorCodeRequiredSsoAuthenticationError, ErrorCodeAccessDeniedError, ErrorCodeInvalidDoggoSignatureError, ErrorCodeCannotDeleteDefaultIntegration:
		return true
	}
	return false
}

func (e ErrorCode) String() string {
	return string(e)
}

func (e *ErrorCode) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ErrorCode", str)
	}
	return nil
}

func (e ErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Event actor type
type EventActor string

const (
	// Web application user
	EventActorUser EventActor = "USER"
	// Client SDK
	EventActorAppPublic EventActor = "APP_PUBLIC"
	// Client SDK with hardened authentication
	EventActorAppCustomer EventActor = "APP_CUSTOMER"
	// Backend SDK
	EventActorAppServer EventActor = "APP_SERVER"
	// Stigg user service key
	EventActorService EventActor = "SERVICE"
	// Salesforce API key
	EventActorSalesforce EventActor = "SALESFORCE"
	// Stigg customer support
	EventActorSupport EventActor = "SUPPORT"
	// Stigg internal system
	EventActorSystem EventActor = "SYSTEM"
	// Stigg scheduler
	EventActorScheduler EventActor = "SCHEDULER"
	// Stripe triggered event
	EventActorStripe EventActor = "STRIPE"
	// AWS triggered event
	EventActorAWS EventActor = "AWS"
	// Migration triggered event
	EventActorMigration EventActor = "MIGRATION"
	// Import triggered event
	EventActorImport EventActor = "IMPORT"
)

var AllEventActor = []EventActor{
	EventActorUser,
	EventActorAppPublic,
	EventActorAppCustomer,
	EventActorAppServer,
	EventActorService,
	EventActorSalesforce,
	EventActorSupport,
	EventActorSystem,
	EventActorScheduler,
	EventActorStripe,
	EventActorAWS,
	EventActorMigration,
	EventActorImport,
}

func (e EventActor) IsValid() bool {
	switch e {
	case EventActorUser, EventActorAppPublic, EventActorAppCustomer, EventActorAppServer, EventActorService, EventActorSalesforce, EventActorSupport, EventActorSystem, EventActorScheduler, EventActorStripe, EventActorAWS, EventActorMigration, EventActorImport:
		return true
	}
	return false
}

func (e EventActor) String() string {
	return string(e)
}

func (e *EventActor) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventActor(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventActor", str)
	}
	return nil
}

func (e EventActor) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Event entity type
type EventEntityType string

const (
	// Customer entity
	EventEntityTypeCustomer EventEntityType = "CUSTOMER"
	// Subscription entity
	EventEntityTypeSubscription EventEntityType = "SUBSCRIPTION"
	// Plan entity
	EventEntityTypePlan EventEntityType = "PLAN"
	// Add-on entity
	EventEntityTypeAddon EventEntityType = "ADDON"
	// Feature entity
	EventEntityTypeFeature EventEntityType = "FEATURE"
	// Entitlement entity
	EventEntityTypeEntitlement EventEntityType = "ENTITLEMENT"
	// Measurement entity
	EventEntityTypeMeasurement EventEntityType = "MEASUREMENT"
	// Promotional entitlement entity
	EventEntityTypePromotionalEntitlement EventEntityType = "PROMOTIONAL_ENTITLEMENT"
	// Package entity
	EventEntityTypePackage EventEntityType = "PACKAGE"
	// Coupon entity
	EventEntityTypeCoupon EventEntityType = "COUPON"
	// Import entity
	EventEntityTypeImport EventEntityType = "IMPORT"
	// Product entity
	EventEntityTypeProduct EventEntityType = "PRODUCT"
	// Package group entity
	EventEntityTypePackageGroup EventEntityType = "PACKAGE_GROUP"
)

var AllEventEntityType = []EventEntityType{
	EventEntityTypeCustomer,
	EventEntityTypeSubscription,
	EventEntityTypePlan,
	EventEntityTypeAddon,
	EventEntityTypeFeature,
	EventEntityTypeEntitlement,
	EventEntityTypeMeasurement,
	EventEntityTypePromotionalEntitlement,
	EventEntityTypePackage,
	EventEntityTypeCoupon,
	EventEntityTypeImport,
	EventEntityTypeProduct,
	EventEntityTypePackageGroup,
}

func (e EventEntityType) IsValid() bool {
	switch e {
	case EventEntityTypeCustomer, EventEntityTypeSubscription, EventEntityTypePlan, EventEntityTypeAddon, EventEntityTypeFeature, EventEntityTypeEntitlement, EventEntityTypeMeasurement, EventEntityTypePromotionalEntitlement, EventEntityTypePackage, EventEntityTypeCoupon, EventEntityTypeImport, EventEntityTypeProduct, EventEntityTypePackageGroup:
		return true
	}
	return false
}

func (e EventEntityType) String() string {
	return string(e)
}

func (e *EventEntityType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventEntityType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventEntityType", str)
	}
	return nil
}

func (e EventEntityType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EventLogSortFields string

const (
	EventLogSortFieldsID             EventLogSortFields = "id"
	EventLogSortFieldsCreatedAt      EventLogSortFields = "createdAt"
	EventLogSortFieldsEnvironmentID  EventLogSortFields = "environmentId"
	EventLogSortFieldsEventLogType   EventLogSortFields = "eventLogType"
	EventLogSortFieldsEntityID       EventLogSortFields = "entityId"
	EventLogSortFieldsParentEntityID EventLogSortFields = "parentEntityId"
)

var AllEventLogSortFields = []EventLogSortFields{
	EventLogSortFieldsID,
	EventLogSortFieldsCreatedAt,
	EventLogSortFieldsEnvironmentID,
	EventLogSortFieldsEventLogType,
	EventLogSortFieldsEntityID,
	EventLogSortFieldsParentEntityID,
}

func (e EventLogSortFields) IsValid() bool {
	switch e {
	case EventLogSortFieldsID, EventLogSortFieldsCreatedAt, EventLogSortFieldsEnvironmentID, EventLogSortFieldsEventLogType, EventLogSortFieldsEntityID, EventLogSortFieldsParentEntityID:
		return true
	}
	return false
}

func (e EventLogSortFields) String() string {
	return string(e)
}

func (e *EventLogSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventLogSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventLogSortFields", str)
	}
	return nil
}

func (e EventLogSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// EventLogType
type EventLogType string

const (
	EventLogTypeCustomerCreated                                 EventLogType = "CUSTOMER_CREATED"
	EventLogTypeCustomerUpdated                                 EventLogType = "CUSTOMER_UPDATED"
	EventLogTypeCustomerDeleted                                 EventLogType = "CUSTOMER_DELETED"
	EventLogTypeSubscriptionCreated                             EventLogType = "SUBSCRIPTION_CREATED"
	EventLogTypeSubscriptionTrialStarted                        EventLogType = "SUBSCRIPTION_TRIAL_STARTED"
	EventLogTypeSubscriptionTrialExpired                        EventLogType = "SUBSCRIPTION_TRIAL_EXPIRED"
	EventLogTypeSubscriptionTrialConverted                      EventLogType = "SUBSCRIPTION_TRIAL_CONVERTED"
	EventLogTypeSubscriptionTrialEndsSoon                       EventLogType = "SUBSCRIPTION_TRIAL_ENDS_SOON"
	EventLogTypeSubscriptionUpdated                             EventLogType = "SUBSCRIPTION_UPDATED"
	EventLogTypeSubscriptionCanceled                            EventLogType = "SUBSCRIPTION_CANCELED"
	EventLogTypeSubscriptionExpired                             EventLogType = "SUBSCRIPTION_EXPIRED"
	EventLogTypeSubscriptionUsageUpdated                        EventLogType = "SUBSCRIPTION_USAGE_UPDATED"
	EventLogTypeCreateSubscriptionFailed                        EventLogType = "CREATE_SUBSCRIPTION_FAILED"
	EventLogTypePlanCreated                                     EventLogType = "PLAN_CREATED"
	EventLogTypePlanUpdated                                     EventLogType = "PLAN_UPDATED"
	EventLogTypePlanDeleted                                     EventLogType = "PLAN_DELETED"
	EventLogTypeAddonCreated                                    EventLogType = "ADDON_CREATED"
	EventLogTypeAddonUpdated                                    EventLogType = "ADDON_UPDATED"
	EventLogTypeAddonDeleted                                    EventLogType = "ADDON_DELETED"
	EventLogTypeFeatureCreated                                  EventLogType = "FEATURE_CREATED"
	EventLogTypeFeatureUpdated                                  EventLogType = "FEATURE_UPDATED"
	EventLogTypeFeatureDeleted                                  EventLogType = "FEATURE_DELETED"
	EventLogTypeFeatureArchived                                 EventLogType = "FEATURE_ARCHIVED"
	EventLogTypeEntitlementRequested                            EventLogType = "ENTITLEMENT_REQUESTED"
	EventLogTypeEntitlementGranted                              EventLogType = "ENTITLEMENT_GRANTED"
	EventLogTypeEntitlementDenied                               EventLogType = "ENTITLEMENT_DENIED"
	EventLogTypeEntitlementsUpdated                             EventLogType = "ENTITLEMENTS_UPDATED"
	EventLogTypeEntitlementUsageExceeded                        EventLogType = "ENTITLEMENT_USAGE_EXCEEDED"
	EventLogTypeMeasurementReported                             EventLogType = "MEASUREMENT_REPORTED"
	EventLogTypePromotionalEntitlementGranted                   EventLogType = "PROMOTIONAL_ENTITLEMENT_GRANTED"
	EventLogTypePromotionalEntitlementUpdated                   EventLogType = "PROMOTIONAL_ENTITLEMENT_UPDATED"
	EventLogTypePromotionalEntitlementExpired                   EventLogType = "PROMOTIONAL_ENTITLEMENT_EXPIRED"
	EventLogTypePromotionalEntitlementRevoked                   EventLogType = "PROMOTIONAL_ENTITLEMENT_REVOKED"
	EventLogTypePackagePublished                                EventLogType = "PACKAGE_PUBLISHED"
	EventLogTypeResyncIntegrationTriggered                      EventLogType = "RESYNC_INTEGRATION_TRIGGERED"
	EventLogTypeCouponCreated                                   EventLogType = "COUPON_CREATED"
	EventLogTypeCouponUpdated                                   EventLogType = "COUPON_UPDATED"
	EventLogTypeCouponArchived                                  EventLogType = "COUPON_ARCHIVED"
	EventLogTypeImportIntegrationCatalogTriggered               EventLogType = "IMPORT_INTEGRATION_CATALOG_TRIGGERED"
	EventLogTypeImportIntegrationCustomersTriggered             EventLogType = "IMPORT_INTEGRATION_CUSTOMERS_TRIGGERED"
	EventLogTypeSyncFailed                                      EventLogType = "SYNC_FAILED"
	EventLogTypeCustomerPaymentFailed                           EventLogType = "CUSTOMER_PAYMENT_FAILED"
	EventLogTypeProductCreated                                  EventLogType = "PRODUCT_CREATED"
	EventLogTypeProductUpdated                                  EventLogType = "PRODUCT_UPDATED"
	EventLogTypeProductDeleted                                  EventLogType = "PRODUCT_DELETED"
	EventLogTypePackageGroupCreated                             EventLogType = "PACKAGE_GROUP_CREATED"
	EventLogTypePackageGroupUpdated                             EventLogType = "PACKAGE_GROUP_UPDATED"
	EventLogTypeEnvironmentDeleted                              EventLogType = "ENVIRONMENT_DELETED"
	EventLogTypeWidgetConfigurationUpdated                      EventLogType = "WIDGET_CONFIGURATION_UPDATED"
	EventLogTypeEdgeAPIDataResync                               EventLogType = "EDGE_API_DATA_RESYNC"
	EventLogTypeEdgeAPIDoggoResync                              EventLogType = "EDGE_API_DOGGO_RESYNC"
	EventLogTypeCustomerResourceEntitlementCalculationTriggered EventLogType = "CUSTOMER_RESOURCE_ENTITLEMENT_CALCULATION_TRIGGERED"
	EventLogTypeCustomerEntitlementCalculationTriggered         EventLogType = "CUSTOMER_ENTITLEMENT_CALCULATION_TRIGGERED"
	EventLogTypeRecalculateEntitlementsTriggered                EventLogType = "RECALCULATE_ENTITLEMENTS_TRIGGERED"
	EventLogTypeImportSubscriptionsBulkTriggered                EventLogType = "IMPORT_SUBSCRIPTIONS_BULK_TRIGGERED"
	EventLogTypeEdgeAPICustomerDataResync                       EventLogType = "EDGE_API_CUSTOMER_DATA_RESYNC"
	EventLogTypeEdgeAPISubscriptionsDataResync                  EventLogType = "EDGE_API_SUBSCRIPTIONS_DATA_RESYNC"
	EventLogTypeEdgeAPIPackageEntitlementsDataResync            EventLogType = "EDGE_API_PACKAGE_ENTITLEMENTS_DATA_RESYNC"
	EventLogTypeSubscriptionsMigrated                           EventLogType = "SUBSCRIPTIONS_MIGRATED"
	EventLogTypeSubscriptionsMigrationTriggered                 EventLogType = "SUBSCRIPTIONS_MIGRATION_TRIGGERED"
	EventLogTypeSubscriptionBillingMonthEndsSoon                EventLogType = "SUBSCRIPTION_BILLING_MONTH_ENDS_SOON"
	EventLogTypeSubscriptionUsageChargeTriggered                EventLogType = "SUBSCRIPTION_USAGE_CHARGE_TRIGGERED"
	EventLogTypeSubscriptionSpentLimitExceeded                  EventLogType = "SUBSCRIPTION_SPENT_LIMIT_EXCEEDED"
)

var AllEventLogType = []EventLogType{
	EventLogTypeCustomerCreated,
	EventLogTypeCustomerUpdated,
	EventLogTypeCustomerDeleted,
	EventLogTypeSubscriptionCreated,
	EventLogTypeSubscriptionTrialStarted,
	EventLogTypeSubscriptionTrialExpired,
	EventLogTypeSubscriptionTrialConverted,
	EventLogTypeSubscriptionTrialEndsSoon,
	EventLogTypeSubscriptionUpdated,
	EventLogTypeSubscriptionCanceled,
	EventLogTypeSubscriptionExpired,
	EventLogTypeSubscriptionUsageUpdated,
	EventLogTypeCreateSubscriptionFailed,
	EventLogTypePlanCreated,
	EventLogTypePlanUpdated,
	EventLogTypePlanDeleted,
	EventLogTypeAddonCreated,
	EventLogTypeAddonUpdated,
	EventLogTypeAddonDeleted,
	EventLogTypeFeatureCreated,
	EventLogTypeFeatureUpdated,
	EventLogTypeFeatureDeleted,
	EventLogTypeFeatureArchived,
	EventLogTypeEntitlementRequested,
	EventLogTypeEntitlementGranted,
	EventLogTypeEntitlementDenied,
	EventLogTypeEntitlementsUpdated,
	EventLogTypeEntitlementUsageExceeded,
	EventLogTypeMeasurementReported,
	EventLogTypePromotionalEntitlementGranted,
	EventLogTypePromotionalEntitlementUpdated,
	EventLogTypePromotionalEntitlementExpired,
	EventLogTypePromotionalEntitlementRevoked,
	EventLogTypePackagePublished,
	EventLogTypeResyncIntegrationTriggered,
	EventLogTypeCouponCreated,
	EventLogTypeCouponUpdated,
	EventLogTypeCouponArchived,
	EventLogTypeImportIntegrationCatalogTriggered,
	EventLogTypeImportIntegrationCustomersTriggered,
	EventLogTypeSyncFailed,
	EventLogTypeCustomerPaymentFailed,
	EventLogTypeProductCreated,
	EventLogTypeProductUpdated,
	EventLogTypeProductDeleted,
	EventLogTypePackageGroupCreated,
	EventLogTypePackageGroupUpdated,
	EventLogTypeEnvironmentDeleted,
	EventLogTypeWidgetConfigurationUpdated,
	EventLogTypeEdgeAPIDataResync,
	EventLogTypeEdgeAPIDoggoResync,
	EventLogTypeCustomerResourceEntitlementCalculationTriggered,
	EventLogTypeCustomerEntitlementCalculationTriggered,
	EventLogTypeRecalculateEntitlementsTriggered,
	EventLogTypeImportSubscriptionsBulkTriggered,
	EventLogTypeEdgeAPICustomerDataResync,
	EventLogTypeEdgeAPISubscriptionsDataResync,
	EventLogTypeEdgeAPIPackageEntitlementsDataResync,
	EventLogTypeSubscriptionsMigrated,
	EventLogTypeSubscriptionsMigrationTriggered,
	EventLogTypeSubscriptionBillingMonthEndsSoon,
	EventLogTypeSubscriptionUsageChargeTriggered,
	EventLogTypeSubscriptionSpentLimitExceeded,
}

func (e EventLogType) IsValid() bool {
	switch e {
	case EventLogTypeCustomerCreated, EventLogTypeCustomerUpdated, EventLogTypeCustomerDeleted, EventLogTypeSubscriptionCreated, EventLogTypeSubscriptionTrialStarted, EventLogTypeSubscriptionTrialExpired, EventLogTypeSubscriptionTrialConverted, EventLogTypeSubscriptionTrialEndsSoon, EventLogTypeSubscriptionUpdated, EventLogTypeSubscriptionCanceled, EventLogTypeSubscriptionExpired, EventLogTypeSubscriptionUsageUpdated, EventLogTypeCreateSubscriptionFailed, EventLogTypePlanCreated, EventLogTypePlanUpdated, EventLogTypePlanDeleted, EventLogTypeAddonCreated, EventLogTypeAddonUpdated, EventLogTypeAddonDeleted, EventLogTypeFeatureCreated, EventLogTypeFeatureUpdated, EventLogTypeFeatureDeleted, EventLogTypeFeatureArchived, EventLogTypeEntitlementRequested, EventLogTypeEntitlementGranted, EventLogTypeEntitlementDenied, EventLogTypeEntitlementsUpdated, EventLogTypeEntitlementUsageExceeded, EventLogTypeMeasurementReported, EventLogTypePromotionalEntitlementGranted, EventLogTypePromotionalEntitlementUpdated, EventLogTypePromotionalEntitlementExpired, EventLogTypePromotionalEntitlementRevoked, EventLogTypePackagePublished, EventLogTypeResyncIntegrationTriggered, EventLogTypeCouponCreated, EventLogTypeCouponUpdated, EventLogTypeCouponArchived, EventLogTypeImportIntegrationCatalogTriggered, EventLogTypeImportIntegrationCustomersTriggered, EventLogTypeSyncFailed, EventLogTypeCustomerPaymentFailed, EventLogTypeProductCreated, EventLogTypeProductUpdated, EventLogTypeProductDeleted, EventLogTypePackageGroupCreated, EventLogTypePackageGroupUpdated, EventLogTypeEnvironmentDeleted, EventLogTypeWidgetConfigurationUpdated, EventLogTypeEdgeAPIDataResync, EventLogTypeEdgeAPIDoggoResync, EventLogTypeCustomerResourceEntitlementCalculationTriggered, EventLogTypeCustomerEntitlementCalculationTriggered, EventLogTypeRecalculateEntitlementsTriggered, EventLogTypeImportSubscriptionsBulkTriggered, EventLogTypeEdgeAPICustomerDataResync, EventLogTypeEdgeAPISubscriptionsDataResync, EventLogTypeEdgeAPIPackageEntitlementsDataResync, EventLogTypeSubscriptionsMigrated, EventLogTypeSubscriptionsMigrationTriggered, EventLogTypeSubscriptionBillingMonthEndsSoon, EventLogTypeSubscriptionUsageChargeTriggered, EventLogTypeSubscriptionSpentLimitExceeded:
		return true
	}
	return false
}

func (e EventLogType) String() string {
	return string(e)
}

func (e *EventLogType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventLogType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventLogType", str)
	}
	return nil
}

func (e EventLogType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ExperimentSortFields string

const (
	ExperimentSortFieldsID            ExperimentSortFields = "id"
	ExperimentSortFieldsName          ExperimentSortFields = "name"
	ExperimentSortFieldsRefID         ExperimentSortFields = "refId"
	ExperimentSortFieldsCreatedAt     ExperimentSortFields = "createdAt"
	ExperimentSortFieldsEnvironmentID ExperimentSortFields = "environmentId"
	ExperimentSortFieldsProductID     ExperimentSortFields = "productId"
	ExperimentSortFieldsStatus        ExperimentSortFields = "status"
)

var AllExperimentSortFields = []ExperimentSortFields{
	ExperimentSortFieldsID,
	ExperimentSortFieldsName,
	ExperimentSortFieldsRefID,
	ExperimentSortFieldsCreatedAt,
	ExperimentSortFieldsEnvironmentID,
	ExperimentSortFieldsProductID,
	ExperimentSortFieldsStatus,
}

func (e ExperimentSortFields) IsValid() bool {
	switch e {
	case ExperimentSortFieldsID, ExperimentSortFieldsName, ExperimentSortFieldsRefID, ExperimentSortFieldsCreatedAt, ExperimentSortFieldsEnvironmentID, ExperimentSortFieldsProductID, ExperimentSortFieldsStatus:
		return true
	}
	return false
}

func (e ExperimentSortFields) String() string {
	return string(e)
}

func (e *ExperimentSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExperimentSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExperimentSortFields", str)
	}
	return nil
}

func (e ExperimentSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of the EXPERIMENT
type ExperimentStatus string

const (
	ExperimentStatusDraft      ExperimentStatus = "DRAFT"
	ExperimentStatusInProgress ExperimentStatus = "IN_PROGRESS"
	ExperimentStatusCompleted  ExperimentStatus = "COMPLETED"
)

var AllExperimentStatus = []ExperimentStatus{
	ExperimentStatusDraft,
	ExperimentStatusInProgress,
	ExperimentStatusCompleted,
}

func (e ExperimentStatus) IsValid() bool {
	switch e {
	case ExperimentStatusDraft, ExperimentStatusInProgress, ExperimentStatusCompleted:
		return true
	}
	return false
}

func (e ExperimentStatus) String() string {
	return string(e)
}

func (e *ExperimentStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExperimentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExperimentStatus", str)
	}
	return nil
}

func (e ExperimentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FeatureSortFields string

const (
	FeatureSortFieldsID            FeatureSortFields = "id"
	FeatureSortFieldsDisplayName   FeatureSortFields = "displayName"
	FeatureSortFieldsRefID         FeatureSortFields = "refId"
	FeatureSortFieldsCreatedAt     FeatureSortFields = "createdAt"
	FeatureSortFieldsUpdatedAt     FeatureSortFields = "updatedAt"
	FeatureSortFieldsDescription   FeatureSortFields = "description"
	FeatureSortFieldsFeatureType   FeatureSortFields = "featureType"
	FeatureSortFieldsMeterType     FeatureSortFields = "meterType"
	FeatureSortFieldsFeatureStatus FeatureSortFields = "featureStatus"
	FeatureSortFieldsEnvironmentID FeatureSortFields = "environmentId"
)

var AllFeatureSortFields = []FeatureSortFields{
	FeatureSortFieldsID,
	FeatureSortFieldsDisplayName,
	FeatureSortFieldsRefID,
	FeatureSortFieldsCreatedAt,
	FeatureSortFieldsUpdatedAt,
	FeatureSortFieldsDescription,
	FeatureSortFieldsFeatureType,
	FeatureSortFieldsMeterType,
	FeatureSortFieldsFeatureStatus,
	FeatureSortFieldsEnvironmentID,
}

func (e FeatureSortFields) IsValid() bool {
	switch e {
	case FeatureSortFieldsID, FeatureSortFieldsDisplayName, FeatureSortFieldsRefID, FeatureSortFieldsCreatedAt, FeatureSortFieldsUpdatedAt, FeatureSortFieldsDescription, FeatureSortFieldsFeatureType, FeatureSortFieldsMeterType, FeatureSortFieldsFeatureStatus, FeatureSortFieldsEnvironmentID:
		return true
	}
	return false
}

func (e FeatureSortFields) String() string {
	return string(e)
}

func (e *FeatureSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FeatureSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FeatureSortFields", str)
	}
	return nil
}

func (e FeatureSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Feature status.
type FeatureStatus string

const (
	FeatureStatusNew       FeatureStatus = "NEW"
	FeatureStatusSuspended FeatureStatus = "SUSPENDED"
	FeatureStatusActive    FeatureStatus = "ACTIVE"
)

var AllFeatureStatus = []FeatureStatus{
	FeatureStatusNew,
	FeatureStatusSuspended,
	FeatureStatusActive,
}

func (e FeatureStatus) IsValid() bool {
	switch e {
	case FeatureStatusNew, FeatureStatusSuspended, FeatureStatusActive:
		return true
	}
	return false
}

func (e FeatureStatus) String() string {
	return string(e)
}

func (e *FeatureStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FeatureStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FeatureStatus", str)
	}
	return nil
}

func (e FeatureStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of the feature
type FeatureType string

const (
	FeatureTypeBoolean FeatureType = "BOOLEAN"
	FeatureTypeNumber  FeatureType = "NUMBER"
)

var AllFeatureType = []FeatureType{
	FeatureTypeBoolean,
	FeatureTypeNumber,
}

func (e FeatureType) IsValid() bool {
	switch e {
	case FeatureTypeBoolean, FeatureTypeNumber:
		return true
	}
	return false
}

func (e FeatureType) String() string {
	return string(e)
}

func (e *FeatureType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FeatureType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FeatureType", str)
	}
	return nil
}

func (e FeatureType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Font weight
type FontWeight string

const (
	FontWeightNormal FontWeight = "NORMAL"
	FontWeightBold   FontWeight = "BOLD"
)

var AllFontWeight = []FontWeight{
	FontWeightNormal,
	FontWeightBold,
}

func (e FontWeight) IsValid() bool {
	switch e {
	case FontWeightNormal, FontWeightBold:
		return true
	}
	return false
}

func (e FontWeight) String() string {
	return string(e)
}

func (e *FontWeight) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FontWeight(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FontWeight", str)
	}
	return nil
}

func (e FontWeight) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HookSortFields string

const (
	HookSortFieldsID            HookSortFields = "id"
	HookSortFieldsEndpoint      HookSortFields = "endpoint"
	HookSortFieldsStatus        HookSortFields = "status"
	HookSortFieldsCreatedAt     HookSortFields = "createdAt"
	HookSortFieldsEnvironmentID HookSortFields = "environmentId"
)

var AllHookSortFields = []HookSortFields{
	HookSortFieldsID,
	HookSortFieldsEndpoint,
	HookSortFieldsStatus,
	HookSortFieldsCreatedAt,
	HookSortFieldsEnvironmentID,
}

func (e HookSortFields) IsValid() bool {
	switch e {
	case HookSortFieldsID, HookSortFieldsEndpoint, HookSortFieldsStatus, HookSortFieldsCreatedAt, HookSortFieldsEnvironmentID:
		return true
	}
	return false
}

func (e HookSortFields) String() string {
	return string(e)
}

func (e *HookSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HookSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HookSortFields", str)
	}
	return nil
}

func (e HookSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// HookStatus.
type HookStatus string

const (
	HookStatusInactive HookStatus = "INACTIVE"
	HookStatusActive   HookStatus = "ACTIVE"
)

var AllHookStatus = []HookStatus{
	HookStatusInactive,
	HookStatusActive,
}

func (e HookStatus) IsValid() bool {
	switch e {
	case HookStatusInactive, HookStatusActive:
		return true
	}
	return false
}

func (e HookStatus) String() string {
	return string(e)
}

func (e *HookStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HookStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HookStatus", str)
	}
	return nil
}

func (e HookStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ImportIntegrationTaskSortFields string

const (
	ImportIntegrationTaskSortFieldsID            ImportIntegrationTaskSortFields = "id"
	ImportIntegrationTaskSortFieldsEnvironmentID ImportIntegrationTaskSortFields = "environmentId"
	ImportIntegrationTaskSortFieldsCreatedAt     ImportIntegrationTaskSortFields = "createdAt"
	ImportIntegrationTaskSortFieldsTaskType      ImportIntegrationTaskSortFields = "taskType"
	ImportIntegrationTaskSortFieldsStatus        ImportIntegrationTaskSortFields = "status"
)

var AllImportIntegrationTaskSortFields = []ImportIntegrationTaskSortFields{
	ImportIntegrationTaskSortFieldsID,
	ImportIntegrationTaskSortFieldsEnvironmentID,
	ImportIntegrationTaskSortFieldsCreatedAt,
	ImportIntegrationTaskSortFieldsTaskType,
	ImportIntegrationTaskSortFieldsStatus,
}

func (e ImportIntegrationTaskSortFields) IsValid() bool {
	switch e {
	case ImportIntegrationTaskSortFieldsID, ImportIntegrationTaskSortFieldsEnvironmentID, ImportIntegrationTaskSortFieldsCreatedAt, ImportIntegrationTaskSortFieldsTaskType, ImportIntegrationTaskSortFieldsStatus:
		return true
	}
	return false
}

func (e ImportIntegrationTaskSortFields) String() string {
	return string(e)
}

func (e *ImportIntegrationTaskSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImportIntegrationTaskSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImportIntegrationTaskSortFields", str)
	}
	return nil
}

func (e ImportIntegrationTaskSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type IntegrationSortFields string

const (
	IntegrationSortFieldsID               IntegrationSortFields = "id"
	IntegrationSortFieldsCreatedAt        IntegrationSortFields = "createdAt"
	IntegrationSortFieldsEnvironmentID    IntegrationSortFields = "environmentId"
	IntegrationSortFieldsVendorIdentifier IntegrationSortFields = "vendorIdentifier"
	IntegrationSortFieldsVendorType       IntegrationSortFields = "vendorType"
)

var AllIntegrationSortFields = []IntegrationSortFields{
	IntegrationSortFieldsID,
	IntegrationSortFieldsCreatedAt,
	IntegrationSortFieldsEnvironmentID,
	IntegrationSortFieldsVendorIdentifier,
	IntegrationSortFieldsVendorType,
}

func (e IntegrationSortFields) IsValid() bool {
	switch e {
	case IntegrationSortFieldsID, IntegrationSortFieldsCreatedAt, IntegrationSortFieldsEnvironmentID, IntegrationSortFieldsVendorIdentifier, IntegrationSortFieldsVendorType:
		return true
	}
	return false
}

func (e IntegrationSortFields) String() string {
	return string(e)
}

func (e *IntegrationSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IntegrationSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IntegrationSortFields", str)
	}
	return nil
}

func (e IntegrationSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of the invoice line item
type InvoiceLineItemType string

const (
	InvoiceLineItemTypeAddonCharge                  InvoiceLineItemType = "AddonCharge"
	InvoiceLineItemTypeOverageCharge                InvoiceLineItemType = "OverageCharge"
	InvoiceLineItemTypeBaseCharge                   InvoiceLineItemType = "BaseCharge"
	InvoiceLineItemTypeInAdvanceCommitmentCharge    InvoiceLineItemType = "InAdvanceCommitmentCharge"
	InvoiceLineItemTypePayAsYouGoCharge             InvoiceLineItemType = "PayAsYouGoCharge"
	InvoiceLineItemTypeTierCharge                   InvoiceLineItemType = "TierCharge"
	InvoiceLineItemTypeMinimumSpendAdjustmentCharge InvoiceLineItemType = "MinimumSpendAdjustmentCharge"
	InvoiceLineItemTypeMinimumSpendCharge           InvoiceLineItemType = "MinimumSpendCharge"
	InvoiceLineItemTypeZeroAmountBaseCharge         InvoiceLineItemType = "ZeroAmountBaseCharge"
	InvoiceLineItemTypeOther                        InvoiceLineItemType = "Other"
)

var AllInvoiceLineItemType = []InvoiceLineItemType{
	InvoiceLineItemTypeAddonCharge,
	InvoiceLineItemTypeOverageCharge,
	InvoiceLineItemTypeBaseCharge,
	InvoiceLineItemTypeInAdvanceCommitmentCharge,
	InvoiceLineItemTypePayAsYouGoCharge,
	InvoiceLineItemTypeTierCharge,
	InvoiceLineItemTypeMinimumSpendAdjustmentCharge,
	InvoiceLineItemTypeMinimumSpendCharge,
	InvoiceLineItemTypeZeroAmountBaseCharge,
	InvoiceLineItemTypeOther,
}

func (e InvoiceLineItemType) IsValid() bool {
	switch e {
	case InvoiceLineItemTypeAddonCharge, InvoiceLineItemTypeOverageCharge, InvoiceLineItemTypeBaseCharge, InvoiceLineItemTypeInAdvanceCommitmentCharge, InvoiceLineItemTypePayAsYouGoCharge, InvoiceLineItemTypeTierCharge, InvoiceLineItemTypeMinimumSpendAdjustmentCharge, InvoiceLineItemTypeMinimumSpendCharge, InvoiceLineItemTypeZeroAmountBaseCharge, InvoiceLineItemTypeOther:
		return true
	}
	return false
}

func (e InvoiceLineItemType) String() string {
	return string(e)
}

func (e *InvoiceLineItemType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InvoiceLineItemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InvoiceLineItemType", str)
	}
	return nil
}

func (e InvoiceLineItemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MemberSortFields string

const (
	MemberSortFieldsID        MemberSortFields = "id"
	MemberSortFieldsCreatedAt MemberSortFields = "createdAt"
	MemberSortFieldsEmail     MemberSortFields = "email"
)

var AllMemberSortFields = []MemberSortFields{
	MemberSortFieldsID,
	MemberSortFieldsCreatedAt,
	MemberSortFieldsEmail,
}

func (e MemberSortFields) IsValid() bool {
	switch e {
	case MemberSortFieldsID, MemberSortFieldsCreatedAt, MemberSortFieldsEmail:
		return true
	}
	return false
}

func (e MemberSortFields) String() string {
	return string(e)
}

func (e *MemberSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MemberSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MemberSortFields", str)
	}
	return nil
}

func (e MemberSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Member Status.
type MemberStatus string

const (
	MemberStatusInvited    MemberStatus = "INVITED"
	MemberStatusRegistered MemberStatus = "REGISTERED"
)

var AllMemberStatus = []MemberStatus{
	MemberStatusInvited,
	MemberStatusRegistered,
}

func (e MemberStatus) IsValid() bool {
	switch e {
	case MemberStatusInvited, MemberStatusRegistered:
		return true
	}
	return false
}

func (e MemberStatus) String() string {
	return string(e)
}

func (e *MemberStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MemberStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MemberStatus", str)
	}
	return nil
}

func (e MemberStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The meter type of the feature
type MeterType string

const (
	MeterTypeNone        MeterType = "None"
	MeterTypeFluctuating MeterType = "Fluctuating"
	MeterTypeIncremental MeterType = "Incremental"
)

var AllMeterType = []MeterType{
	MeterTypeNone,
	MeterTypeFluctuating,
	MeterTypeIncremental,
}

func (e MeterType) IsValid() bool {
	switch e {
	case MeterTypeNone, MeterTypeFluctuating, MeterTypeIncremental:
		return true
	}
	return false
}

func (e MeterType) String() string {
	return string(e)
}

func (e *MeterType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MeterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MeterType", str)
	}
	return nil
}

func (e MeterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Monthly reset period according to configuration
type MonthlyAccordingTo string

const (
	MonthlyAccordingToSubscriptionStart MonthlyAccordingTo = "SubscriptionStart"
	MonthlyAccordingToStartOfTheMonth   MonthlyAccordingTo = "StartOfTheMonth"
)

var AllMonthlyAccordingTo = []MonthlyAccordingTo{
	MonthlyAccordingToSubscriptionStart,
	MonthlyAccordingToStartOfTheMonth,
}

func (e MonthlyAccordingTo) IsValid() bool {
	switch e {
	case MonthlyAccordingToSubscriptionStart, MonthlyAccordingToStartOfTheMonth:
		return true
	}
	return false
}

func (e MonthlyAccordingTo) String() string {
	return string(e)
}

func (e *MonthlyAccordingTo) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MonthlyAccordingTo(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MonthlyAccordingTo", str)
	}
	return nil
}

func (e MonthlyAccordingTo) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Configures when the overage charge is billed.
type OverageBillingPeriod string

const (
	OverageBillingPeriodOnSubscriptionRenewal OverageBillingPeriod = "ON_SUBSCRIPTION_RENEWAL"
	OverageBillingPeriodMonthly               OverageBillingPeriod = "MONTHLY"
)

var AllOverageBillingPeriod = []OverageBillingPeriod{
	OverageBillingPeriodOnSubscriptionRenewal,
	OverageBillingPeriodMonthly,
}

func (e OverageBillingPeriod) IsValid() bool {
	switch e {
	case OverageBillingPeriodOnSubscriptionRenewal, OverageBillingPeriodMonthly:
		return true
	}
	return false
}

func (e OverageBillingPeriod) String() string {
	return string(e)
}

func (e *OverageBillingPeriod) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OverageBillingPeriod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OverageBillingPeriod", str)
	}
	return nil
}

func (e OverageBillingPeriod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PackageDTOSortFields string

const (
	PackageDTOSortFieldsID            PackageDTOSortFields = "id"
	PackageDTOSortFieldsCreatedAt     PackageDTOSortFields = "createdAt"
	PackageDTOSortFieldsUpdatedAt     PackageDTOSortFields = "updatedAt"
	PackageDTOSortFieldsRefID         PackageDTOSortFields = "refId"
	PackageDTOSortFieldsBillingID     PackageDTOSortFields = "billingId"
	PackageDTOSortFieldsDisplayName   PackageDTOSortFields = "displayName"
	PackageDTOSortFieldsStatus        PackageDTOSortFields = "status"
	PackageDTOSortFieldsPricingType   PackageDTOSortFields = "pricingType"
	PackageDTOSortFieldsDescription   PackageDTOSortFields = "description"
	PackageDTOSortFieldsEnvironmentID PackageDTOSortFields = "environmentId"
	PackageDTOSortFieldsProductID     PackageDTOSortFields = "productId"
	PackageDTOSortFieldsIsLatest      PackageDTOSortFields = "isLatest"
	PackageDTOSortFieldsVersionNumber PackageDTOSortFields = "versionNumber"
)

var AllPackageDTOSortFields = []PackageDTOSortFields{
	PackageDTOSortFieldsID,
	PackageDTOSortFieldsCreatedAt,
	PackageDTOSortFieldsUpdatedAt,
	PackageDTOSortFieldsRefID,
	PackageDTOSortFieldsBillingID,
	PackageDTOSortFieldsDisplayName,
	PackageDTOSortFieldsStatus,
	PackageDTOSortFieldsPricingType,
	PackageDTOSortFieldsDescription,
	PackageDTOSortFieldsEnvironmentID,
	PackageDTOSortFieldsProductID,
	PackageDTOSortFieldsIsLatest,
	PackageDTOSortFieldsVersionNumber,
}

func (e PackageDTOSortFields) IsValid() bool {
	switch e {
	case PackageDTOSortFieldsID, PackageDTOSortFieldsCreatedAt, PackageDTOSortFieldsUpdatedAt, PackageDTOSortFieldsRefID, PackageDTOSortFieldsBillingID, PackageDTOSortFieldsDisplayName, PackageDTOSortFieldsStatus, PackageDTOSortFieldsPricingType, PackageDTOSortFieldsDescription, PackageDTOSortFieldsEnvironmentID, PackageDTOSortFieldsProductID, PackageDTOSortFieldsIsLatest, PackageDTOSortFieldsVersionNumber:
		return true
	}
	return false
}

func (e PackageDTOSortFields) String() string {
	return string(e)
}

func (e *PackageDTOSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PackageDTOSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PackageDTOSortFields", str)
	}
	return nil
}

func (e PackageDTOSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PackageEntitlementSortFields string

const (
	PackageEntitlementSortFieldsID            PackageEntitlementSortFields = "id"
	PackageEntitlementSortFieldsPackageID     PackageEntitlementSortFields = "packageId"
	PackageEntitlementSortFieldsCreatedAt     PackageEntitlementSortFields = "createdAt"
	PackageEntitlementSortFieldsUpdatedAt     PackageEntitlementSortFields = "updatedAt"
	PackageEntitlementSortFieldsEnvironmentID PackageEntitlementSortFields = "environmentId"
)

var AllPackageEntitlementSortFields = []PackageEntitlementSortFields{
	PackageEntitlementSortFieldsID,
	PackageEntitlementSortFieldsPackageID,
	PackageEntitlementSortFieldsCreatedAt,
	PackageEntitlementSortFieldsUpdatedAt,
	PackageEntitlementSortFieldsEnvironmentID,
}

func (e PackageEntitlementSortFields) IsValid() bool {
	switch e {
	case PackageEntitlementSortFieldsID, PackageEntitlementSortFieldsPackageID, PackageEntitlementSortFieldsCreatedAt, PackageEntitlementSortFieldsUpdatedAt, PackageEntitlementSortFieldsEnvironmentID:
		return true
	}
	return false
}

func (e PackageEntitlementSortFields) String() string {
	return string(e)
}

func (e *PackageEntitlementSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PackageEntitlementSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PackageEntitlementSortFields", str)
	}
	return nil
}

func (e PackageEntitlementSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PackageGroupSortFields string

const (
	PackageGroupSortFieldsDisplayName    PackageGroupSortFields = "displayName"
	PackageGroupSortFieldsPackageGroupID PackageGroupSortFields = "packageGroupId"
	PackageGroupSortFieldsCreatedAt      PackageGroupSortFields = "createdAt"
	PackageGroupSortFieldsUpdatedAt      PackageGroupSortFields = "updatedAt"
	PackageGroupSortFieldsEnvironmentID  PackageGroupSortFields = "environmentId"
	PackageGroupSortFieldsIsLatest       PackageGroupSortFields = "isLatest"
	PackageGroupSortFieldsVersionNumber  PackageGroupSortFields = "versionNumber"
	PackageGroupSortFieldsStatus         PackageGroupSortFields = "status"
	PackageGroupSortFieldsProductID      PackageGroupSortFields = "productId"
)

var AllPackageGroupSortFields = []PackageGroupSortFields{
	PackageGroupSortFieldsDisplayName,
	PackageGroupSortFieldsPackageGroupID,
	PackageGroupSortFieldsCreatedAt,
	PackageGroupSortFieldsUpdatedAt,
	PackageGroupSortFieldsEnvironmentID,
	PackageGroupSortFieldsIsLatest,
	PackageGroupSortFieldsVersionNumber,
	PackageGroupSortFieldsStatus,
	PackageGroupSortFieldsProductID,
}

func (e PackageGroupSortFields) IsValid() bool {
	switch e {
	case PackageGroupSortFieldsDisplayName, PackageGroupSortFieldsPackageGroupID, PackageGroupSortFieldsCreatedAt, PackageGroupSortFieldsUpdatedAt, PackageGroupSortFieldsEnvironmentID, PackageGroupSortFieldsIsLatest, PackageGroupSortFieldsVersionNumber, PackageGroupSortFieldsStatus, PackageGroupSortFieldsProductID:
		return true
	}
	return false
}

func (e PackageGroupSortFields) String() string {
	return string(e)
}

func (e *PackageGroupSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PackageGroupSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PackageGroupSortFields", str)
	}
	return nil
}

func (e PackageGroupSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Package group status.
type PackageGroupStatus string

const (
	// The package group is a draft.
	PackageGroupStatusDraft PackageGroupStatus = "DRAFT"
	// The package group is published.
	PackageGroupStatusPublished PackageGroupStatus = "PUBLISHED"
	// The package group is archived.
	PackageGroupStatusArchived PackageGroupStatus = "ARCHIVED"
)

var AllPackageGroupStatus = []PackageGroupStatus{
	PackageGroupStatusDraft,
	PackageGroupStatusPublished,
	PackageGroupStatusArchived,
}

func (e PackageGroupStatus) IsValid() bool {
	switch e {
	case PackageGroupStatusDraft, PackageGroupStatusPublished, PackageGroupStatusArchived:
		return true
	}
	return false
}

func (e PackageGroupStatus) String() string {
	return string(e)
}

func (e *PackageGroupStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PackageGroupStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PackageGroupStatus", str)
	}
	return nil
}

func (e PackageGroupStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Package status.
type PackageStatus string

const (
	PackageStatusDraft     PackageStatus = "DRAFT"
	PackageStatusPublished PackageStatus = "PUBLISHED"
	PackageStatusArchived  PackageStatus = "ARCHIVED"
)

var AllPackageStatus = []PackageStatus{
	PackageStatusDraft,
	PackageStatusPublished,
	PackageStatusArchived,
}

func (e PackageStatus) IsValid() bool {
	switch e {
	case PackageStatusDraft, PackageStatusPublished, PackageStatusArchived:
		return true
	}
	return false
}

func (e PackageStatus) String() string {
	return string(e)
}

func (e *PackageStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PackageStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PackageStatus", str)
	}
	return nil
}

func (e PackageStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Payment collection
type PaymentCollection string

const (
	PaymentCollectionNotRequired    PaymentCollection = "NOT_REQUIRED"
	PaymentCollectionProcessing     PaymentCollection = "PROCESSING"
	PaymentCollectionFailed         PaymentCollection = "FAILED"
	PaymentCollectionActionRequired PaymentCollection = "ACTION_REQUIRED"
)

var AllPaymentCollection = []PaymentCollection{
	PaymentCollectionNotRequired,
	PaymentCollectionProcessing,
	PaymentCollectionFailed,
	PaymentCollectionActionRequired,
}

func (e PaymentCollection) IsValid() bool {
	switch e {
	case PaymentCollectionNotRequired, PaymentCollectionProcessing, PaymentCollectionFailed, PaymentCollectionActionRequired:
		return true
	}
	return false
}

func (e PaymentCollection) String() string {
	return string(e)
}

func (e *PaymentCollection) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentCollection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentCollection", str)
	}
	return nil
}

func (e PaymentCollection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The method used to collect payments for a subscription
type PaymentCollectionMethod string

const (
	// Automatically charge the payment method on file
	PaymentCollectionMethodCharge PaymentCollectionMethod = "CHARGE"
	// Generate an invoice to the customer to pay manually
	PaymentCollectionMethodInvoice PaymentCollectionMethod = "INVOICE"
	// Do not leverage Stigg to manage payments for this subscription
	PaymentCollectionMethodNone PaymentCollectionMethod = "NONE"
)

var AllPaymentCollectionMethod = []PaymentCollectionMethod{
	PaymentCollectionMethodCharge,
	PaymentCollectionMethodInvoice,
	PaymentCollectionMethodNone,
}

func (e PaymentCollectionMethod) IsValid() bool {
	switch e {
	case PaymentCollectionMethodCharge, PaymentCollectionMethodInvoice, PaymentCollectionMethodNone:
		return true
	}
	return false
}

func (e PaymentCollectionMethod) String() string {
	return string(e)
}

func (e *PaymentCollectionMethod) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentCollectionMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentCollectionMethod", str)
	}
	return nil
}

func (e PaymentCollectionMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Type of a payment method
type PaymentMethodType string

const (
	PaymentMethodTypeCard PaymentMethodType = "CARD"
	PaymentMethodTypeBank PaymentMethodType = "BANK"
)

var AllPaymentMethodType = []PaymentMethodType{
	PaymentMethodTypeCard,
	PaymentMethodTypeBank,
}

func (e PaymentMethodType) IsValid() bool {
	switch e {
	case PaymentMethodTypeCard, PaymentMethodTypeBank:
		return true
	}
	return false
}

func (e PaymentMethodType) String() string {
	return string(e)
}

func (e *PaymentMethodType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentMethodType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentMethodType", str)
	}
	return nil
}

func (e PaymentMethodType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Type of the change between two plans of the same subscription
type PlanChangeType string

const (
	// Subscription upgrade to higher plan
	PlanChangeTypeUpgrade PlanChangeType = "UPGRADE"
	// Subscription downgrade to lower plan
	PlanChangeTypeDowngrade PlanChangeType = "DOWNGRADE"
	// Subscription remains on the same plan
	PlanChangeTypeNone PlanChangeType = "NONE"
)

var AllPlanChangeType = []PlanChangeType{
	PlanChangeTypeUpgrade,
	PlanChangeTypeDowngrade,
	PlanChangeTypeNone,
}

func (e PlanChangeType) IsValid() bool {
	switch e {
	case PlanChangeTypeUpgrade, PlanChangeTypeDowngrade, PlanChangeTypeNone:
		return true
	}
	return false
}

func (e PlanChangeType) String() string {
	return string(e)
}

func (e *PlanChangeType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PlanChangeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PlanChangeType", str)
	}
	return nil
}

func (e PlanChangeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PlanSortFields string

const (
	PlanSortFieldsID            PlanSortFields = "id"
	PlanSortFieldsCreatedAt     PlanSortFields = "createdAt"
	PlanSortFieldsUpdatedAt     PlanSortFields = "updatedAt"
	PlanSortFieldsRefID         PlanSortFields = "refId"
	PlanSortFieldsBillingID     PlanSortFields = "billingId"
	PlanSortFieldsDisplayName   PlanSortFields = "displayName"
	PlanSortFieldsStatus        PlanSortFields = "status"
	PlanSortFieldsPricingType   PlanSortFields = "pricingType"
	PlanSortFieldsDescription   PlanSortFields = "description"
	PlanSortFieldsEnvironmentID PlanSortFields = "environmentId"
	PlanSortFieldsProductID     PlanSortFields = "productId"
	PlanSortFieldsIsLatest      PlanSortFields = "isLatest"
	PlanSortFieldsVersionNumber PlanSortFields = "versionNumber"
)

var AllPlanSortFields = []PlanSortFields{
	PlanSortFieldsID,
	PlanSortFieldsCreatedAt,
	PlanSortFieldsUpdatedAt,
	PlanSortFieldsRefID,
	PlanSortFieldsBillingID,
	PlanSortFieldsDisplayName,
	PlanSortFieldsStatus,
	PlanSortFieldsPricingType,
	PlanSortFieldsDescription,
	PlanSortFieldsEnvironmentID,
	PlanSortFieldsProductID,
	PlanSortFieldsIsLatest,
	PlanSortFieldsVersionNumber,
}

func (e PlanSortFields) IsValid() bool {
	switch e {
	case PlanSortFieldsID, PlanSortFieldsCreatedAt, PlanSortFieldsUpdatedAt, PlanSortFieldsRefID, PlanSortFieldsBillingID, PlanSortFieldsDisplayName, PlanSortFieldsStatus, PlanSortFieldsPricingType, PlanSortFieldsDescription, PlanSortFieldsEnvironmentID, PlanSortFieldsProductID, PlanSortFieldsIsLatest, PlanSortFieldsVersionNumber:
		return true
	}
	return false
}

func (e PlanSortFields) String() string {
	return string(e)
}

func (e *PlanSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PlanSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PlanSortFields", str)
	}
	return nil
}

func (e PlanSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PriceSortFields string

const (
	PriceSortFieldsID             PriceSortFields = "id"
	PriceSortFieldsCreatedAt      PriceSortFields = "createdAt"
	PriceSortFieldsBillingPeriod  PriceSortFields = "billingPeriod"
	PriceSortFieldsBillingModel   PriceSortFields = "billingModel"
	PriceSortFieldsBillingCadence PriceSortFields = "billingCadence"
	PriceSortFieldsTiersMode      PriceSortFields = "tiersMode"
	PriceSortFieldsBillingID      PriceSortFields = "billingId"
)

var AllPriceSortFields = []PriceSortFields{
	PriceSortFieldsID,
	PriceSortFieldsCreatedAt,
	PriceSortFieldsBillingPeriod,
	PriceSortFieldsBillingModel,
	PriceSortFieldsBillingCadence,
	PriceSortFieldsTiersMode,
	PriceSortFieldsBillingID,
}

func (e PriceSortFields) IsValid() bool {
	switch e {
	case PriceSortFieldsID, PriceSortFieldsCreatedAt, PriceSortFieldsBillingPeriod, PriceSortFieldsBillingModel, PriceSortFieldsBillingCadence, PriceSortFieldsTiersMode, PriceSortFieldsBillingID:
		return true
	}
	return false
}

func (e PriceSortFields) String() string {
	return string(e)
}

func (e *PriceSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceSortFields", str)
	}
	return nil
}

func (e PriceSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Pricing Type.
type PricingType string

const (
	PricingTypeFree   PricingType = "FREE"
	PricingTypePaid   PricingType = "PAID"
	PricingTypeCustom PricingType = "CUSTOM"
)

var AllPricingType = []PricingType{
	PricingTypeFree,
	PricingTypePaid,
	PricingTypeCustom,
}

func (e PricingType) IsValid() bool {
	switch e {
	case PricingTypeFree, PricingTypePaid, PricingTypeCustom:
		return true
	}
	return false
}

func (e PricingType) String() string {
	return string(e)
}

func (e *PricingType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PricingType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PricingType", str)
	}
	return nil
}

func (e PricingType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProductSortFields string

const (
	ProductSortFieldsID                        ProductSortFields = "id"
	ProductSortFieldsDisplayName               ProductSortFields = "displayName"
	ProductSortFieldsRefID                     ProductSortFields = "refId"
	ProductSortFieldsDescription               ProductSortFields = "description"
	ProductSortFieldsCreatedAt                 ProductSortFields = "createdAt"
	ProductSortFieldsUpdatedAt                 ProductSortFields = "updatedAt"
	ProductSortFieldsEnvironmentID             ProductSortFields = "environmentId"
	ProductSortFieldsIsDefaultProduct          ProductSortFields = "isDefaultProduct"
	ProductSortFieldsMultipleSubscriptions     ProductSortFields = "multipleSubscriptions"
	ProductSortFieldsAWSMarketplaceProductID   ProductSortFields = "awsMarketplaceProductId"
	ProductSortFieldsAWSMarketplaceProductCode ProductSortFields = "awsMarketplaceProductCode"
)

var AllProductSortFields = []ProductSortFields{
	ProductSortFieldsID,
	ProductSortFieldsDisplayName,
	ProductSortFieldsRefID,
	ProductSortFieldsDescription,
	ProductSortFieldsCreatedAt,
	ProductSortFieldsUpdatedAt,
	ProductSortFieldsEnvironmentID,
	ProductSortFieldsIsDefaultProduct,
	ProductSortFieldsMultipleSubscriptions,
	ProductSortFieldsAWSMarketplaceProductID,
	ProductSortFieldsAWSMarketplaceProductCode,
}

func (e ProductSortFields) IsValid() bool {
	switch e {
	case ProductSortFieldsID, ProductSortFieldsDisplayName, ProductSortFieldsRefID, ProductSortFieldsDescription, ProductSortFieldsCreatedAt, ProductSortFieldsUpdatedAt, ProductSortFieldsEnvironmentID, ProductSortFieldsIsDefaultProduct, ProductSortFieldsMultipleSubscriptions, ProductSortFieldsAWSMarketplaceProductID, ProductSortFieldsAWSMarketplaceProductCode:
		return true
	}
	return false
}

func (e ProductSortFields) String() string {
	return string(e)
}

func (e *ProductSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductSortFields", str)
	}
	return nil
}

func (e ProductSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Promotional entitlement duration
type PromotionalEntitlementPeriod string

const (
	PromotionalEntitlementPeriodOneWeek  PromotionalEntitlementPeriod = "ONE_WEEK"
	PromotionalEntitlementPeriodOneMonth PromotionalEntitlementPeriod = "ONE_MONTH"
	PromotionalEntitlementPeriodSixMonth PromotionalEntitlementPeriod = "SIX_MONTH"
	PromotionalEntitlementPeriodOneYear  PromotionalEntitlementPeriod = "ONE_YEAR"
	PromotionalEntitlementPeriodLifetime PromotionalEntitlementPeriod = "LIFETIME"
	PromotionalEntitlementPeriodCustom   PromotionalEntitlementPeriod = "CUSTOM"
)

var AllPromotionalEntitlementPeriod = []PromotionalEntitlementPeriod{
	PromotionalEntitlementPeriodOneWeek,
	PromotionalEntitlementPeriodOneMonth,
	PromotionalEntitlementPeriodSixMonth,
	PromotionalEntitlementPeriodOneYear,
	PromotionalEntitlementPeriodLifetime,
	PromotionalEntitlementPeriodCustom,
}

func (e PromotionalEntitlementPeriod) IsValid() bool {
	switch e {
	case PromotionalEntitlementPeriodOneWeek, PromotionalEntitlementPeriodOneMonth, PromotionalEntitlementPeriodSixMonth, PromotionalEntitlementPeriodOneYear, PromotionalEntitlementPeriodLifetime, PromotionalEntitlementPeriodCustom:
		return true
	}
	return false
}

func (e PromotionalEntitlementPeriod) String() string {
	return string(e)
}

func (e *PromotionalEntitlementPeriod) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PromotionalEntitlementPeriod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PromotionalEntitlementPeriod", str)
	}
	return nil
}

func (e PromotionalEntitlementPeriod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PromotionalEntitlementSortFields string

const (
	PromotionalEntitlementSortFieldsID            PromotionalEntitlementSortFields = "id"
	PromotionalEntitlementSortFieldsCreatedAt     PromotionalEntitlementSortFields = "createdAt"
	PromotionalEntitlementSortFieldsUpdatedAt     PromotionalEntitlementSortFields = "updatedAt"
	PromotionalEntitlementSortFieldsStatus        PromotionalEntitlementSortFields = "status"
	PromotionalEntitlementSortFieldsEnvironmentID PromotionalEntitlementSortFields = "environmentId"
)

var AllPromotionalEntitlementSortFields = []PromotionalEntitlementSortFields{
	PromotionalEntitlementSortFieldsID,
	PromotionalEntitlementSortFieldsCreatedAt,
	PromotionalEntitlementSortFieldsUpdatedAt,
	PromotionalEntitlementSortFieldsStatus,
	PromotionalEntitlementSortFieldsEnvironmentID,
}

func (e PromotionalEntitlementSortFields) IsValid() bool {
	switch e {
	case PromotionalEntitlementSortFieldsID, PromotionalEntitlementSortFieldsCreatedAt, PromotionalEntitlementSortFieldsUpdatedAt, PromotionalEntitlementSortFieldsStatus, PromotionalEntitlementSortFieldsEnvironmentID:
		return true
	}
	return false
}

func (e PromotionalEntitlementSortFields) String() string {
	return string(e)
}

func (e *PromotionalEntitlementSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PromotionalEntitlementSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PromotionalEntitlementSortFields", str)
	}
	return nil
}

func (e PromotionalEntitlementSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Promotional entitlement status
type PromotionalEntitlementStatus string

const (
	PromotionalEntitlementStatusActive  PromotionalEntitlementStatus = "Active"
	PromotionalEntitlementStatusExpired PromotionalEntitlementStatus = "Expired"
	PromotionalEntitlementStatusPaused  PromotionalEntitlementStatus = "Paused"
)

var AllPromotionalEntitlementStatus = []PromotionalEntitlementStatus{
	PromotionalEntitlementStatusActive,
	PromotionalEntitlementStatusExpired,
	PromotionalEntitlementStatusPaused,
}

func (e PromotionalEntitlementStatus) IsValid() bool {
	switch e {
	case PromotionalEntitlementStatusActive, PromotionalEntitlementStatusExpired, PromotionalEntitlementStatusPaused:
		return true
	}
	return false
}

func (e PromotionalEntitlementStatus) String() string {
	return string(e)
}

func (e *PromotionalEntitlementStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PromotionalEntitlementStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PromotionalEntitlementStatus", str)
	}
	return nil
}

func (e PromotionalEntitlementStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProrationBehavior string

const (
	ProrationBehaviorInvoiceImmediately ProrationBehavior = "INVOICE_IMMEDIATELY"
	ProrationBehaviorCreateProrations   ProrationBehavior = "CREATE_PRORATIONS"
)

var AllProrationBehavior = []ProrationBehavior{
	ProrationBehaviorInvoiceImmediately,
	ProrationBehaviorCreateProrations,
}

func (e ProrationBehavior) IsValid() bool {
	switch e {
	case ProrationBehaviorInvoiceImmediately, ProrationBehaviorCreateProrations:
		return true
	}
	return false
}

func (e ProrationBehavior) String() string {
	return string(e)
}

func (e *ProrationBehavior) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProrationBehavior(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProrationBehavior", str)
	}
	return nil
}

func (e ProrationBehavior) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Provision subscription status
type ProvisionSubscriptionStatus string

const (
	ProvisionSubscriptionStatusPaymentRequired ProvisionSubscriptionStatus = "PAYMENT_REQUIRED"
	ProvisionSubscriptionStatusSuccess         ProvisionSubscriptionStatus = "SUCCESS"
)

var AllProvisionSubscriptionStatus = []ProvisionSubscriptionStatus{
	ProvisionSubscriptionStatusPaymentRequired,
	ProvisionSubscriptionStatusSuccess,
}

func (e ProvisionSubscriptionStatus) IsValid() bool {
	switch e {
	case ProvisionSubscriptionStatusPaymentRequired, ProvisionSubscriptionStatusSuccess:
		return true
	}
	return false
}

func (e ProvisionSubscriptionStatus) String() string {
	return string(e)
}

func (e *ProvisionSubscriptionStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProvisionSubscriptionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProvisionSubscriptionStatus", str)
	}
	return nil
}

func (e ProvisionSubscriptionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// PublishMigrationType
type PublishMigrationType string

const (
	PublishMigrationTypeNewCustomers PublishMigrationType = "NEW_CUSTOMERS"
	PublishMigrationTypeAllCustomers PublishMigrationType = "ALL_CUSTOMERS"
)

var AllPublishMigrationType = []PublishMigrationType{
	PublishMigrationTypeNewCustomers,
	PublishMigrationTypeAllCustomers,
}

func (e PublishMigrationType) IsValid() bool {
	switch e {
	case PublishMigrationTypeNewCustomers, PublishMigrationTypeAllCustomers:
		return true
	}
	return false
}

func (e PublishMigrationType) String() string {
	return string(e)
}

func (e *PublishMigrationType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PublishMigrationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PublishMigrationType", str)
	}
	return nil
}

func (e PublishMigrationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Options for when a change for a paid subscription should take effect
type ScheduleStrategy string

const (
	// Schedule the change to the end of the billing period
	ScheduleStrategyEndOfBillingPeriod ScheduleStrategy = "END_OF_BILLING_PERIOD"
	// Schedule the change to the end of the billing month (for subscriptions whose billing period is larger then month)
	ScheduleStrategyEndOfBillingMonth ScheduleStrategy = "END_OF_BILLING_MONTH"
	// Apply the change immediately
	ScheduleStrategyImmediate ScheduleStrategy = "IMMEDIATE"
)

var AllScheduleStrategy = []ScheduleStrategy{
	ScheduleStrategyEndOfBillingPeriod,
	ScheduleStrategyEndOfBillingMonth,
	ScheduleStrategyImmediate,
}

func (e ScheduleStrategy) IsValid() bool {
	switch e {
	case ScheduleStrategyEndOfBillingPeriod, ScheduleStrategyEndOfBillingMonth, ScheduleStrategyImmediate:
		return true
	}
	return false
}

func (e ScheduleStrategy) String() string {
	return string(e)
}

func (e *ScheduleStrategy) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScheduleStrategy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ScheduleStrategy", str)
	}
	return nil
}

func (e ScheduleStrategy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Sort Directions
type SortDirection string

const (
	SortDirectionAsc  SortDirection = "ASC"
	SortDirectionDesc SortDirection = "DESC"
)

var AllSortDirection = []SortDirection{
	SortDirectionAsc,
	SortDirectionDesc,
}

func (e SortDirection) IsValid() bool {
	switch e {
	case SortDirectionAsc, SortDirectionDesc:
		return true
	}
	return false
}

func (e SortDirection) String() string {
	return string(e)
}

func (e *SortDirection) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortDirection", str)
	}
	return nil
}

func (e SortDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Sort Nulls Options
type SortNulls string

const (
	SortNullsNullsFirst SortNulls = "NULLS_FIRST"
	SortNullsNullsLast  SortNulls = "NULLS_LAST"
)

var AllSortNulls = []SortNulls{
	SortNullsNullsFirst,
	SortNullsNullsLast,
}

func (e SortNulls) IsValid() bool {
	switch e {
	case SortNullsNullsFirst, SortNullsNullsLast:
		return true
	}
	return false
}

func (e SortNulls) String() string {
	return string(e)
}

func (e *SortNulls) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortNulls(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortNulls", str)
	}
	return nil
}

func (e SortNulls) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SourceType string

const (
	SourceTypeJsClientSdk            SourceType = "JS_CLIENT_SDK"
	SourceTypeNodeServerSdk          SourceType = "NODE_SERVER_SDK"
	SourceTypePersistentCacheService SourceType = "PERSISTENT_CACHE_SERVICE"
)

var AllSourceType = []SourceType{
	SourceTypeJsClientSdk,
	SourceTypeNodeServerSdk,
	SourceTypePersistentCacheService,
}

func (e SourceType) IsValid() bool {
	switch e {
	case SourceTypeJsClientSdk, SourceTypeNodeServerSdk, SourceTypePersistentCacheService:
		return true
	}
	return false
}

func (e SourceType) String() string {
	return string(e)
}

func (e *SourceType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SourceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SourceType", str)
	}
	return nil
}

func (e SourceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubscriptionAddonSortFields string

const (
	SubscriptionAddonSortFieldsID        SubscriptionAddonSortFields = "id"
	SubscriptionAddonSortFieldsQuantity  SubscriptionAddonSortFields = "quantity"
	SubscriptionAddonSortFieldsUpdatedAt SubscriptionAddonSortFields = "updatedAt"
	SubscriptionAddonSortFieldsCreatedAt SubscriptionAddonSortFields = "createdAt"
)

var AllSubscriptionAddonSortFields = []SubscriptionAddonSortFields{
	SubscriptionAddonSortFieldsID,
	SubscriptionAddonSortFieldsQuantity,
	SubscriptionAddonSortFieldsUpdatedAt,
	SubscriptionAddonSortFieldsCreatedAt,
}

func (e SubscriptionAddonSortFields) IsValid() bool {
	switch e {
	case SubscriptionAddonSortFieldsID, SubscriptionAddonSortFieldsQuantity, SubscriptionAddonSortFieldsUpdatedAt, SubscriptionAddonSortFieldsCreatedAt:
		return true
	}
	return false
}

func (e SubscriptionAddonSortFields) String() string {
	return string(e)
}

func (e *SubscriptionAddonSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionAddonSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionAddonSortFields", str)
	}
	return nil
}

func (e SubscriptionAddonSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Subscription cancellation status
type SubscriptionCancelReason string

const (
	SubscriptionCancelReasonUpgradeOrDowngrade    SubscriptionCancelReason = "UpgradeOrDowngrade"
	SubscriptionCancelReasonCancelledByBilling    SubscriptionCancelReason = "CancelledByBilling"
	SubscriptionCancelReasonExpired               SubscriptionCancelReason = "Expired"
	SubscriptionCancelReasonDetachBilling         SubscriptionCancelReason = "DetachBilling"
	SubscriptionCancelReasonTrialEnded            SubscriptionCancelReason = "TrialEnded"
	SubscriptionCancelReasonImmediate             SubscriptionCancelReason = "Immediate"
	SubscriptionCancelReasonTrialConverted        SubscriptionCancelReason = "TrialConverted"
	SubscriptionCancelReasonPendingPaymentExpired SubscriptionCancelReason = "PendingPaymentExpired"
	SubscriptionCancelReasonScheduledCancellation SubscriptionCancelReason = "ScheduledCancellation"
	SubscriptionCancelReasonCustomerArchived      SubscriptionCancelReason = "CustomerArchived"
	SubscriptionCancelReasonAutoCancellationRule  SubscriptionCancelReason = "AutoCancellationRule"
)

var AllSubscriptionCancelReason = []SubscriptionCancelReason{
	SubscriptionCancelReasonUpgradeOrDowngrade,
	SubscriptionCancelReasonCancelledByBilling,
	SubscriptionCancelReasonExpired,
	SubscriptionCancelReasonDetachBilling,
	SubscriptionCancelReasonTrialEnded,
	SubscriptionCancelReasonImmediate,
	SubscriptionCancelReasonTrialConverted,
	SubscriptionCancelReasonPendingPaymentExpired,
	SubscriptionCancelReasonScheduledCancellation,
	SubscriptionCancelReasonCustomerArchived,
	SubscriptionCancelReasonAutoCancellationRule,
}

func (e SubscriptionCancelReason) IsValid() bool {
	switch e {
	case SubscriptionCancelReasonUpgradeOrDowngrade, SubscriptionCancelReasonCancelledByBilling, SubscriptionCancelReasonExpired, SubscriptionCancelReasonDetachBilling, SubscriptionCancelReasonTrialEnded, SubscriptionCancelReasonImmediate, SubscriptionCancelReasonTrialConverted, SubscriptionCancelReasonPendingPaymentExpired, SubscriptionCancelReasonScheduledCancellation, SubscriptionCancelReasonCustomerArchived, SubscriptionCancelReasonAutoCancellationRule:
		return true
	}
	return false
}

func (e SubscriptionCancelReason) String() string {
	return string(e)
}

func (e *SubscriptionCancelReason) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionCancelReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionCancelReason", str)
	}
	return nil
}

func (e SubscriptionCancelReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubscriptionCancellationAction string

const (
	SubscriptionCancellationActionDefault            SubscriptionCancellationAction = "DEFAULT"
	SubscriptionCancellationActionRevokeEntitlements SubscriptionCancellationAction = "REVOKE_ENTITLEMENTS"
)

var AllSubscriptionCancellationAction = []SubscriptionCancellationAction{
	SubscriptionCancellationActionDefault,
	SubscriptionCancellationActionRevokeEntitlements,
}

func (e SubscriptionCancellationAction) IsValid() bool {
	switch e {
	case SubscriptionCancellationActionDefault, SubscriptionCancellationActionRevokeEntitlements:
		return true
	}
	return false
}

func (e SubscriptionCancellationAction) String() string {
	return string(e)
}

func (e *SubscriptionCancellationAction) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionCancellationAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionCancellationAction", str)
	}
	return nil
}

func (e SubscriptionCancellationAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubscriptionCancellationTime string

const (
	SubscriptionCancellationTimeEndOfBillingPeriod SubscriptionCancellationTime = "END_OF_BILLING_PERIOD"
	SubscriptionCancellationTimeImmediate          SubscriptionCancellationTime = "IMMEDIATE"
	SubscriptionCancellationTimeSpecificDate       SubscriptionCancellationTime = "SPECIFIC_DATE"
)

var AllSubscriptionCancellationTime = []SubscriptionCancellationTime{
	SubscriptionCancellationTimeEndOfBillingPeriod,
	SubscriptionCancellationTimeImmediate,
	SubscriptionCancellationTimeSpecificDate,
}

func (e SubscriptionCancellationTime) IsValid() bool {
	switch e {
	case SubscriptionCancellationTimeEndOfBillingPeriod, SubscriptionCancellationTimeImmediate, SubscriptionCancellationTimeSpecificDate:
		return true
	}
	return false
}

func (e SubscriptionCancellationTime) String() string {
	return string(e)
}

func (e *SubscriptionCancellationTime) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionCancellationTime(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionCancellationTime", str)
	}
	return nil
}

func (e SubscriptionCancellationTime) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of the subscription coupon
type SubscriptionCouponStatus string

const (
	SubscriptionCouponStatusActive  SubscriptionCouponStatus = "ACTIVE"
	SubscriptionCouponStatusExpired SubscriptionCouponStatus = "EXPIRED"
	SubscriptionCouponStatusRemoved SubscriptionCouponStatus = "REMOVED"
)

var AllSubscriptionCouponStatus = []SubscriptionCouponStatus{
	SubscriptionCouponStatusActive,
	SubscriptionCouponStatusExpired,
	SubscriptionCouponStatusRemoved,
}

func (e SubscriptionCouponStatus) IsValid() bool {
	switch e {
	case SubscriptionCouponStatusActive, SubscriptionCouponStatusExpired, SubscriptionCouponStatusRemoved:
		return true
	}
	return false
}

func (e SubscriptionCouponStatus) String() string {
	return string(e)
}

func (e *SubscriptionCouponStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionCouponStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionCouponStatus", str)
	}
	return nil
}

func (e SubscriptionCouponStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Subscription decision strategy
type SubscriptionDecisionStrategy string

const (
	SubscriptionDecisionStrategyPredefinedFreePlan          SubscriptionDecisionStrategy = "PREDEFINED_FREE_PLAN"
	SubscriptionDecisionStrategyPredefinedTrialPlan         SubscriptionDecisionStrategy = "PREDEFINED_TRIAL_PLAN"
	SubscriptionDecisionStrategyRequestedPlan               SubscriptionDecisionStrategy = "REQUESTED_PLAN"
	SubscriptionDecisionStrategySkippedSubscriptionCreation SubscriptionDecisionStrategy = "SKIPPED_SUBSCRIPTION_CREATION"
)

var AllSubscriptionDecisionStrategy = []SubscriptionDecisionStrategy{
	SubscriptionDecisionStrategyPredefinedFreePlan,
	SubscriptionDecisionStrategyPredefinedTrialPlan,
	SubscriptionDecisionStrategyRequestedPlan,
	SubscriptionDecisionStrategySkippedSubscriptionCreation,
}

func (e SubscriptionDecisionStrategy) IsValid() bool {
	switch e {
	case SubscriptionDecisionStrategyPredefinedFreePlan, SubscriptionDecisionStrategyPredefinedTrialPlan, SubscriptionDecisionStrategyRequestedPlan, SubscriptionDecisionStrategySkippedSubscriptionCreation:
		return true
	}
	return false
}

func (e SubscriptionDecisionStrategy) String() string {
	return string(e)
}

func (e *SubscriptionDecisionStrategy) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionDecisionStrategy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionDecisionStrategy", str)
	}
	return nil
}

func (e SubscriptionDecisionStrategy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubscriptionEndSetup string

const (
	SubscriptionEndSetupDowngradeToFree    SubscriptionEndSetup = "DOWNGRADE_TO_FREE"
	SubscriptionEndSetupCancelSubscription SubscriptionEndSetup = "CANCEL_SUBSCRIPTION"
)

var AllSubscriptionEndSetup = []SubscriptionEndSetup{
	SubscriptionEndSetupDowngradeToFree,
	SubscriptionEndSetupCancelSubscription,
}

func (e SubscriptionEndSetup) IsValid() bool {
	switch e {
	case SubscriptionEndSetupDowngradeToFree, SubscriptionEndSetupCancelSubscription:
		return true
	}
	return false
}

func (e SubscriptionEndSetup) String() string {
	return string(e)
}

func (e *SubscriptionEndSetup) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionEndSetup(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionEndSetup", str)
	}
	return nil
}

func (e SubscriptionEndSetup) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubscriptionEntitlementSortFields string

const (
	SubscriptionEntitlementSortFieldsID             SubscriptionEntitlementSortFields = "id"
	SubscriptionEntitlementSortFieldsSubscriptionID SubscriptionEntitlementSortFields = "subscriptionId"
	SubscriptionEntitlementSortFieldsCreatedAt      SubscriptionEntitlementSortFields = "createdAt"
	SubscriptionEntitlementSortFieldsUpdatedAt      SubscriptionEntitlementSortFields = "updatedAt"
	SubscriptionEntitlementSortFieldsEnvironmentID  SubscriptionEntitlementSortFields = "environmentId"
)

var AllSubscriptionEntitlementSortFields = []SubscriptionEntitlementSortFields{
	SubscriptionEntitlementSortFieldsID,
	SubscriptionEntitlementSortFieldsSubscriptionID,
	SubscriptionEntitlementSortFieldsCreatedAt,
	SubscriptionEntitlementSortFieldsUpdatedAt,
	SubscriptionEntitlementSortFieldsEnvironmentID,
}

func (e SubscriptionEntitlementSortFields) IsValid() bool {
	switch e {
	case SubscriptionEntitlementSortFieldsID, SubscriptionEntitlementSortFieldsSubscriptionID, SubscriptionEntitlementSortFieldsCreatedAt, SubscriptionEntitlementSortFieldsUpdatedAt, SubscriptionEntitlementSortFieldsEnvironmentID:
		return true
	}
	return false
}

func (e SubscriptionEntitlementSortFields) String() string {
	return string(e)
}

func (e *SubscriptionEntitlementSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionEntitlementSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionEntitlementSortFields", str)
	}
	return nil
}

func (e SubscriptionEntitlementSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The reason the billing event was created.
type SubscriptionInvoiceBillingReason string

const (
	// A subscription advanced into a new billing cycle.
	SubscriptionInvoiceBillingReasonBillingCycle SubscriptionInvoiceBillingReason = "BILLING_CYCLE"
	// A subscription was created.
	SubscriptionInvoiceBillingReasonSubscriptionCreation SubscriptionInvoiceBillingReason = "SUBSCRIPTION_CREATION"
	// A subscription was updated.
	SubscriptionInvoiceBillingReasonSubscriptionUpdate SubscriptionInvoiceBillingReason = "SUBSCRIPTION_UPDATE"
	// An invoice was created manually.
	SubscriptionInvoiceBillingReasonManual SubscriptionInvoiceBillingReason = "MANUAL"
	// A subscription passed the minimum invoice amount
	SubscriptionInvoiceBillingReasonMinimumInvoiceAmountExceeded SubscriptionInvoiceBillingReason = "MINIMUM_INVOICE_AMOUNT_EXCEEDED"
	// An invoice was created for another reason.
	SubscriptionInvoiceBillingReasonOther SubscriptionInvoiceBillingReason = "OTHER"
)

var AllSubscriptionInvoiceBillingReason = []SubscriptionInvoiceBillingReason{
	SubscriptionInvoiceBillingReasonBillingCycle,
	SubscriptionInvoiceBillingReasonSubscriptionCreation,
	SubscriptionInvoiceBillingReasonSubscriptionUpdate,
	SubscriptionInvoiceBillingReasonManual,
	SubscriptionInvoiceBillingReasonMinimumInvoiceAmountExceeded,
	SubscriptionInvoiceBillingReasonOther,
}

func (e SubscriptionInvoiceBillingReason) IsValid() bool {
	switch e {
	case SubscriptionInvoiceBillingReasonBillingCycle, SubscriptionInvoiceBillingReasonSubscriptionCreation, SubscriptionInvoiceBillingReasonSubscriptionUpdate, SubscriptionInvoiceBillingReasonManual, SubscriptionInvoiceBillingReasonMinimumInvoiceAmountExceeded, SubscriptionInvoiceBillingReasonOther:
		return true
	}
	return false
}

func (e SubscriptionInvoiceBillingReason) String() string {
	return string(e)
}

func (e *SubscriptionInvoiceBillingReason) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionInvoiceBillingReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionInvoiceBillingReason", str)
	}
	return nil
}

func (e SubscriptionInvoiceBillingReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// SubscriptionInvoice status
type SubscriptionInvoiceStatus string

const (
	SubscriptionInvoiceStatusOpen     SubscriptionInvoiceStatus = "OPEN"
	SubscriptionInvoiceStatusCanceled SubscriptionInvoiceStatus = "CANCELED"
	SubscriptionInvoiceStatusPaid     SubscriptionInvoiceStatus = "PAID"
)

var AllSubscriptionInvoiceStatus = []SubscriptionInvoiceStatus{
	SubscriptionInvoiceStatusOpen,
	SubscriptionInvoiceStatusCanceled,
	SubscriptionInvoiceStatusPaid,
}

func (e SubscriptionInvoiceStatus) IsValid() bool {
	switch e {
	case SubscriptionInvoiceStatusOpen, SubscriptionInvoiceStatusCanceled, SubscriptionInvoiceStatusPaid:
		return true
	}
	return false
}

func (e SubscriptionInvoiceStatus) String() string {
	return string(e)
}

func (e *SubscriptionInvoiceStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionInvoiceStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionInvoiceStatus", str)
	}
	return nil
}

func (e SubscriptionInvoiceStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubscriptionMigrationTaskSortFields string

const (
	SubscriptionMigrationTaskSortFieldsID            SubscriptionMigrationTaskSortFields = "id"
	SubscriptionMigrationTaskSortFieldsEnvironmentID SubscriptionMigrationTaskSortFields = "environmentId"
	SubscriptionMigrationTaskSortFieldsCreatedAt     SubscriptionMigrationTaskSortFields = "createdAt"
	SubscriptionMigrationTaskSortFieldsTaskType      SubscriptionMigrationTaskSortFields = "taskType"
	SubscriptionMigrationTaskSortFieldsStatus        SubscriptionMigrationTaskSortFields = "status"
)

var AllSubscriptionMigrationTaskSortFields = []SubscriptionMigrationTaskSortFields{
	SubscriptionMigrationTaskSortFieldsID,
	SubscriptionMigrationTaskSortFieldsEnvironmentID,
	SubscriptionMigrationTaskSortFieldsCreatedAt,
	SubscriptionMigrationTaskSortFieldsTaskType,
	SubscriptionMigrationTaskSortFieldsStatus,
}

func (e SubscriptionMigrationTaskSortFields) IsValid() bool {
	switch e {
	case SubscriptionMigrationTaskSortFieldsID, SubscriptionMigrationTaskSortFieldsEnvironmentID, SubscriptionMigrationTaskSortFieldsCreatedAt, SubscriptionMigrationTaskSortFieldsTaskType, SubscriptionMigrationTaskSortFieldsStatus:
		return true
	}
	return false
}

func (e SubscriptionMigrationTaskSortFields) String() string {
	return string(e)
}

func (e *SubscriptionMigrationTaskSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionMigrationTaskSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionMigrationTaskSortFields", str)
	}
	return nil
}

func (e SubscriptionMigrationTaskSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Set non immediate cancellation time (atm supported only for stripe integration)
type SubscriptionMigrationTime string

const (
	SubscriptionMigrationTimeEndOfBillingPeriod SubscriptionMigrationTime = "END_OF_BILLING_PERIOD"
	SubscriptionMigrationTimeImmediate          SubscriptionMigrationTime = "IMMEDIATE"
)

var AllSubscriptionMigrationTime = []SubscriptionMigrationTime{
	SubscriptionMigrationTimeEndOfBillingPeriod,
	SubscriptionMigrationTimeImmediate,
}

func (e SubscriptionMigrationTime) IsValid() bool {
	switch e {
	case SubscriptionMigrationTimeEndOfBillingPeriod, SubscriptionMigrationTimeImmediate:
		return true
	}
	return false
}

func (e SubscriptionMigrationTime) String() string {
	return string(e)
}

func (e *SubscriptionMigrationTime) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionMigrationTime(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionMigrationTime", str)
	}
	return nil
}

func (e SubscriptionMigrationTime) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubscriptionPriceSortFields string

const (
	SubscriptionPriceSortFieldsID           SubscriptionPriceSortFields = "id"
	SubscriptionPriceSortFieldsCreatedAt    SubscriptionPriceSortFields = "createdAt"
	SubscriptionPriceSortFieldsUpdatedAt    SubscriptionPriceSortFields = "updatedAt"
	SubscriptionPriceSortFieldsUsageLimit   SubscriptionPriceSortFields = "usageLimit"
	SubscriptionPriceSortFieldsHasSoftLimit SubscriptionPriceSortFields = "hasSoftLimit"
	SubscriptionPriceSortFieldsFeatureID    SubscriptionPriceSortFields = "featureId"
	SubscriptionPriceSortFieldsBillingModel SubscriptionPriceSortFields = "billingModel"
)

var AllSubscriptionPriceSortFields = []SubscriptionPriceSortFields{
	SubscriptionPriceSortFieldsID,
	SubscriptionPriceSortFieldsCreatedAt,
	SubscriptionPriceSortFieldsUpdatedAt,
	SubscriptionPriceSortFieldsUsageLimit,
	SubscriptionPriceSortFieldsHasSoftLimit,
	SubscriptionPriceSortFieldsFeatureID,
	SubscriptionPriceSortFieldsBillingModel,
}

func (e SubscriptionPriceSortFields) IsValid() bool {
	switch e {
	case SubscriptionPriceSortFieldsID, SubscriptionPriceSortFieldsCreatedAt, SubscriptionPriceSortFieldsUpdatedAt, SubscriptionPriceSortFieldsUsageLimit, SubscriptionPriceSortFieldsHasSoftLimit, SubscriptionPriceSortFieldsFeatureID, SubscriptionPriceSortFieldsBillingModel:
		return true
	}
	return false
}

func (e SubscriptionPriceSortFields) String() string {
	return string(e)
}

func (e *SubscriptionPriceSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionPriceSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionPriceSortFields", str)
	}
	return nil
}

func (e SubscriptionPriceSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Subscription scheduled schedule status
type SubscriptionScheduleStatus string

const (
	SubscriptionScheduleStatusPendingPayment SubscriptionScheduleStatus = "PendingPayment"
	SubscriptionScheduleStatusScheduled      SubscriptionScheduleStatus = "Scheduled"
	SubscriptionScheduleStatusCanceled       SubscriptionScheduleStatus = "Canceled"
	SubscriptionScheduleStatusDone           SubscriptionScheduleStatus = "Done"
	SubscriptionScheduleStatusFailed         SubscriptionScheduleStatus = "Failed"
)

var AllSubscriptionScheduleStatus = []SubscriptionScheduleStatus{
	SubscriptionScheduleStatusPendingPayment,
	SubscriptionScheduleStatusScheduled,
	SubscriptionScheduleStatusCanceled,
	SubscriptionScheduleStatusDone,
	SubscriptionScheduleStatusFailed,
}

func (e SubscriptionScheduleStatus) IsValid() bool {
	switch e {
	case SubscriptionScheduleStatusPendingPayment, SubscriptionScheduleStatusScheduled, SubscriptionScheduleStatusCanceled, SubscriptionScheduleStatusDone, SubscriptionScheduleStatusFailed:
		return true
	}
	return false
}

func (e SubscriptionScheduleStatus) String() string {
	return string(e)
}

func (e *SubscriptionScheduleStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionScheduleStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionScheduleStatus", str)
	}
	return nil
}

func (e SubscriptionScheduleStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Subscription scheduled schedule type
type SubscriptionScheduleType string

const (
	// Downgrade change
	SubscriptionScheduleTypeDowngrade SubscriptionScheduleType = "Downgrade"
	// Plan change
	SubscriptionScheduleTypePlan SubscriptionScheduleType = "Plan"
	// Billing period change
	SubscriptionScheduleTypeBillingPeriod SubscriptionScheduleType = "BillingPeriod"
	// Unit amount change
	SubscriptionScheduleTypeUnitAmount SubscriptionScheduleType = "UnitAmount"
	// Custom price change
	SubscriptionScheduleTypePriceOverride SubscriptionScheduleType = "PriceOverride"
	// Addon change
	SubscriptionScheduleTypeAddon SubscriptionScheduleType = "Addon"
	// Coupon change
	SubscriptionScheduleTypeCoupon SubscriptionScheduleType = "Coupon"
	// Migrate to latest
	SubscriptionScheduleTypeMigrateToLatest SubscriptionScheduleType = "MigrateToLatest"
	// Additional metadata change
	SubscriptionScheduleTypeAdditionalMetaData SubscriptionScheduleType = "AdditionalMetaData"
)

var AllSubscriptionScheduleType = []SubscriptionScheduleType{
	SubscriptionScheduleTypeDowngrade,
	SubscriptionScheduleTypePlan,
	SubscriptionScheduleTypeBillingPeriod,
	SubscriptionScheduleTypeUnitAmount,
	SubscriptionScheduleTypePriceOverride,
	SubscriptionScheduleTypeAddon,
	SubscriptionScheduleTypeCoupon,
	SubscriptionScheduleTypeMigrateToLatest,
	SubscriptionScheduleTypeAdditionalMetaData,
}

func (e SubscriptionScheduleType) IsValid() bool {
	switch e {
	case SubscriptionScheduleTypeDowngrade, SubscriptionScheduleTypePlan, SubscriptionScheduleTypeBillingPeriod, SubscriptionScheduleTypeUnitAmount, SubscriptionScheduleTypePriceOverride, SubscriptionScheduleTypeAddon, SubscriptionScheduleTypeCoupon, SubscriptionScheduleTypeMigrateToLatest, SubscriptionScheduleTypeAdditionalMetaData:
		return true
	}
	return false
}

func (e SubscriptionScheduleType) String() string {
	return string(e)
}

func (e *SubscriptionScheduleType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionScheduleType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionScheduleType", str)
	}
	return nil
}

func (e SubscriptionScheduleType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubscriptionStartSetup string

const (
	SubscriptionStartSetupPlanSelection SubscriptionStartSetup = "PLAN_SELECTION"
	SubscriptionStartSetupTrialPeriod   SubscriptionStartSetup = "TRIAL_PERIOD"
	SubscriptionStartSetupFreePlan      SubscriptionStartSetup = "FREE_PLAN"
)

var AllSubscriptionStartSetup = []SubscriptionStartSetup{
	SubscriptionStartSetupPlanSelection,
	SubscriptionStartSetupTrialPeriod,
	SubscriptionStartSetupFreePlan,
}

func (e SubscriptionStartSetup) IsValid() bool {
	switch e {
	case SubscriptionStartSetupPlanSelection, SubscriptionStartSetupTrialPeriod, SubscriptionStartSetupFreePlan:
		return true
	}
	return false
}

func (e SubscriptionStartSetup) String() string {
	return string(e)
}

func (e *SubscriptionStartSetup) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionStartSetup(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionStartSetup", str)
	}
	return nil
}

func (e SubscriptionStartSetup) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Subscription status
type SubscriptionStatus string

const (
	SubscriptionStatusPaymentPending SubscriptionStatus = "PAYMENT_PENDING"
	SubscriptionStatusActive         SubscriptionStatus = "ACTIVE"
	SubscriptionStatusExpired        SubscriptionStatus = "EXPIRED"
	SubscriptionStatusInTrial        SubscriptionStatus = "IN_TRIAL"
	SubscriptionStatusCanceled       SubscriptionStatus = "CANCELED"
	SubscriptionStatusNotStarted     SubscriptionStatus = "NOT_STARTED"
)

var AllSubscriptionStatus = []SubscriptionStatus{
	SubscriptionStatusPaymentPending,
	SubscriptionStatusActive,
	SubscriptionStatusExpired,
	SubscriptionStatusInTrial,
	SubscriptionStatusCanceled,
	SubscriptionStatusNotStarted,
}

func (e SubscriptionStatus) IsValid() bool {
	switch e {
	case SubscriptionStatusPaymentPending, SubscriptionStatusActive, SubscriptionStatusExpired, SubscriptionStatusInTrial, SubscriptionStatusCanceled, SubscriptionStatusNotStarted:
		return true
	}
	return false
}

func (e SubscriptionStatus) String() string {
	return string(e)
}

func (e *SubscriptionStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionStatus", str)
	}
	return nil
}

func (e SubscriptionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Decide whether feature usage will be reset upon creation on new subscription
type SubscriptionUpdateUsageCutoffBehavior string

const (
	// Never reset
	SubscriptionUpdateUsageCutoffBehaviorNeverReset SubscriptionUpdateUsageCutoffBehavior = "NEVER_RESET"
	// Always reset
	SubscriptionUpdateUsageCutoffBehaviorAlwaysReset SubscriptionUpdateUsageCutoffBehavior = "ALWAYS_RESET"
	// Billing period changed
	SubscriptionUpdateUsageCutoffBehaviorBillingPeriodChange SubscriptionUpdateUsageCutoffBehavior = "BILLING_PERIOD_CHANGE"
)

var AllSubscriptionUpdateUsageCutoffBehavior = []SubscriptionUpdateUsageCutoffBehavior{
	SubscriptionUpdateUsageCutoffBehaviorNeverReset,
	SubscriptionUpdateUsageCutoffBehaviorAlwaysReset,
	SubscriptionUpdateUsageCutoffBehaviorBillingPeriodChange,
}

func (e SubscriptionUpdateUsageCutoffBehavior) IsValid() bool {
	switch e {
	case SubscriptionUpdateUsageCutoffBehaviorNeverReset, SubscriptionUpdateUsageCutoffBehaviorAlwaysReset, SubscriptionUpdateUsageCutoffBehaviorBillingPeriodChange:
		return true
	}
	return false
}

func (e SubscriptionUpdateUsageCutoffBehavior) String() string {
	return string(e)
}

func (e *SubscriptionUpdateUsageCutoffBehavior) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionUpdateUsageCutoffBehavior(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionUpdateUsageCutoffBehavior", str)
	}
	return nil
}

func (e SubscriptionUpdateUsageCutoffBehavior) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Status of the integration sync
type SyncStatus string

const (
	SyncStatusPending        SyncStatus = "PENDING"
	SyncStatusError          SyncStatus = "ERROR"
	SyncStatusSuccess        SyncStatus = "SUCCESS"
	SyncStatusNoSyncRequired SyncStatus = "NO_SYNC_REQUIRED"
)

var AllSyncStatus = []SyncStatus{
	SyncStatusPending,
	SyncStatusError,
	SyncStatusSuccess,
	SyncStatusNoSyncRequired,
}

func (e SyncStatus) IsValid() bool {
	switch e {
	case SyncStatusPending, SyncStatusError, SyncStatusSuccess, SyncStatusNoSyncRequired:
		return true
	}
	return false
}

func (e SyncStatus) String() string {
	return string(e)
}

func (e *SyncStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SyncStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SyncStatus", str)
	}
	return nil
}

func (e SyncStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskStatus string

const (
	TaskStatusPending         TaskStatus = "PENDING"
	TaskStatusInProgress      TaskStatus = "IN_PROGRESS"
	TaskStatusCompleted       TaskStatus = "COMPLETED"
	TaskStatusPartiallyFailed TaskStatus = "PARTIALLY_FAILED"
	TaskStatusFailed          TaskStatus = "FAILED"
	TaskStatusCanceled        TaskStatus = "CANCELED"
)

var AllTaskStatus = []TaskStatus{
	TaskStatusPending,
	TaskStatusInProgress,
	TaskStatusCompleted,
	TaskStatusPartiallyFailed,
	TaskStatusFailed,
	TaskStatusCanceled,
}

func (e TaskStatus) IsValid() bool {
	switch e {
	case TaskStatusPending, TaskStatusInProgress, TaskStatusCompleted, TaskStatusPartiallyFailed, TaskStatusFailed, TaskStatusCanceled:
		return true
	}
	return false
}

func (e TaskStatus) String() string {
	return string(e)
}

func (e *TaskStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatus", str)
	}
	return nil
}

func (e TaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskType string

const (
	TaskTypeSubscriptionMigration        TaskType = "SUBSCRIPTION_MIGRATION"
	TaskTypeSubscriptionMigrationV2      TaskType = "SUBSCRIPTION_MIGRATION_V2"
	TaskTypeResyncIntegration            TaskType = "RESYNC_INTEGRATION"
	TaskTypeImportIntegrationCatalog     TaskType = "IMPORT_INTEGRATION_CATALOG"
	TaskTypeImportIntegrationCustomers   TaskType = "IMPORT_INTEGRATION_CUSTOMERS"
	TaskTypeRecalculateEntitlements      TaskType = "RECALCULATE_ENTITLEMENTS"
	TaskTypeRecalculateBatchEntitlements TaskType = "RECALCULATE_BATCH_ENTITLEMENTS"
	TaskTypeImportSubscriptionsBulk      TaskType = "IMPORT_SUBSCRIPTIONS_BULK"
)

var AllTaskType = []TaskType{
	TaskTypeSubscriptionMigration,
	TaskTypeSubscriptionMigrationV2,
	TaskTypeResyncIntegration,
	TaskTypeImportIntegrationCatalog,
	TaskTypeImportIntegrationCustomers,
	TaskTypeRecalculateEntitlements,
	TaskTypeRecalculateBatchEntitlements,
	TaskTypeImportSubscriptionsBulk,
}

func (e TaskType) IsValid() bool {
	switch e {
	case TaskTypeSubscriptionMigration, TaskTypeSubscriptionMigrationV2, TaskTypeResyncIntegration, TaskTypeImportIntegrationCatalog, TaskTypeImportIntegrationCustomers, TaskTypeRecalculateEntitlements, TaskTypeRecalculateBatchEntitlements, TaskTypeImportSubscriptionsBulk:
		return true
	}
	return false
}

func (e TaskType) String() string {
	return string(e)
}

func (e *TaskType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskType", str)
	}
	return nil
}

func (e TaskType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Tiers mode.
type TiersMode string

const (
	TiersModeVolume    TiersMode = "VOLUME"
	TiersModeGraduated TiersMode = "GRADUATED"
)

var AllTiersMode = []TiersMode{
	TiersModeVolume,
	TiersModeGraduated,
}

func (e TiersMode) IsValid() bool {
	switch e {
	case TiersModeVolume, TiersModeGraduated:
		return true
	}
	return false
}

func (e TiersMode) String() string {
	return string(e)
}

func (e *TiersMode) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TiersMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TiersMode", str)
	}
	return nil
}

func (e TiersMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Indicates the behavior of the subscription when the trial is expired.
type TrialEndBehavior string

const (
	// convert the trial subscription to a paid subscription
	TrialEndBehaviorConvertToPaid TrialEndBehavior = "CONVERT_TO_PAID"
	// cancel the subscription when the trial is expired
	TrialEndBehaviorCancelSubscription TrialEndBehavior = "CANCEL_SUBSCRIPTION"
)

var AllTrialEndBehavior = []TrialEndBehavior{
	TrialEndBehaviorConvertToPaid,
	TrialEndBehaviorCancelSubscription,
}

func (e TrialEndBehavior) IsValid() bool {
	switch e {
	case TrialEndBehaviorConvertToPaid, TrialEndBehaviorCancelSubscription:
		return true
	}
	return false
}

func (e TrialEndBehavior) String() string {
	return string(e)
}

func (e *TrialEndBehavior) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TrialEndBehavior(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TrialEndBehavior", str)
	}
	return nil
}

func (e TrialEndBehavior) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// day or month.
type TrialPeriodUnits string

const (
	TrialPeriodUnitsDay   TrialPeriodUnits = "DAY"
	TrialPeriodUnitsMonth TrialPeriodUnits = "MONTH"
)

var AllTrialPeriodUnits = []TrialPeriodUnits{
	TrialPeriodUnitsDay,
	TrialPeriodUnitsMonth,
}

func (e TrialPeriodUnits) IsValid() bool {
	switch e {
	case TrialPeriodUnitsDay, TrialPeriodUnitsMonth:
		return true
	}
	return false
}

func (e TrialPeriodUnits) String() string {
	return string(e)
}

func (e *TrialPeriodUnits) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TrialPeriodUnits(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TrialPeriodUnits", str)
	}
	return nil
}

func (e TrialPeriodUnits) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Unit transformation round type
type UnitTransformationRound string

const (
	// Apply round up after transformation
	UnitTransformationRoundUp UnitTransformationRound = "UP"
	// Apply round down after transformation
	UnitTransformationRoundDown UnitTransformationRound = "DOWN"
)

var AllUnitTransformationRound = []UnitTransformationRound{
	UnitTransformationRoundUp,
	UnitTransformationRoundDown,
}

func (e UnitTransformationRound) IsValid() bool {
	switch e {
	case UnitTransformationRoundUp, UnitTransformationRoundDown:
		return true
	}
	return false
}

func (e UnitTransformationRound) String() string {
	return string(e)
}

func (e *UnitTransformationRound) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UnitTransformationRound(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UnitTransformationRound", str)
	}
	return nil
}

func (e UnitTransformationRound) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Type of marker for a usage history point
type UsageMarkerType string

const (
	// Usage was reset due to reaching the end of a usage period
	UsageMarkerTypePeriodicReset UsageMarkerType = "PERIODIC_RESET"
	// Usage was reset due to a subscription change
	UsageMarkerTypeSubscriptionChangeReset UsageMarkerType = "SUBSCRIPTION_CHANGE_RESET"
)

var AllUsageMarkerType = []UsageMarkerType{
	UsageMarkerTypePeriodicReset,
	UsageMarkerTypeSubscriptionChangeReset,
}

func (e UsageMarkerType) IsValid() bool {
	switch e {
	case UsageMarkerTypePeriodicReset, UsageMarkerTypeSubscriptionChangeReset:
		return true
	}
	return false
}

func (e UsageMarkerType) String() string {
	return string(e)
}

func (e *UsageMarkerType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UsageMarkerType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UsageMarkerType", str)
	}
	return nil
}

func (e UsageMarkerType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UsageMeasurementSortFields string

const (
	UsageMeasurementSortFieldsID            UsageMeasurementSortFields = "id"
	UsageMeasurementSortFieldsEnvironmentID UsageMeasurementSortFields = "environmentId"
	UsageMeasurementSortFieldsCreatedAt     UsageMeasurementSortFields = "createdAt"
)

var AllUsageMeasurementSortFields = []UsageMeasurementSortFields{
	UsageMeasurementSortFieldsID,
	UsageMeasurementSortFieldsEnvironmentID,
	UsageMeasurementSortFieldsCreatedAt,
}

func (e UsageMeasurementSortFields) IsValid() bool {
	switch e {
	case UsageMeasurementSortFieldsID, UsageMeasurementSortFieldsEnvironmentID, UsageMeasurementSortFieldsCreatedAt:
		return true
	}
	return false
}

func (e UsageMeasurementSortFields) String() string {
	return string(e)
}

func (e *UsageMeasurementSortFields) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UsageMeasurementSortFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UsageMeasurementSortFields", str)
	}
	return nil
}

func (e UsageMeasurementSortFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UsageUpdateBehavior string

const (
	UsageUpdateBehaviorDelta UsageUpdateBehavior = "DELTA"
	UsageUpdateBehaviorSet   UsageUpdateBehavior = "SET"
)

var AllUsageUpdateBehavior = []UsageUpdateBehavior{
	UsageUpdateBehaviorDelta,
	UsageUpdateBehaviorSet,
}

func (e UsageUpdateBehavior) IsValid() bool {
	switch e {
	case UsageUpdateBehaviorDelta, UsageUpdateBehaviorSet:
		return true
	}
	return false
}

func (e UsageUpdateBehavior) String() string {
	return string(e)
}

func (e *UsageUpdateBehavior) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UsageUpdateBehavior(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UsageUpdateBehavior", str)
	}
	return nil
}

func (e UsageUpdateBehavior) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VendorIdentifier string

const (
	VendorIdentifierAuth0          VendorIdentifier = "AUTH0"
	VendorIdentifierZuora          VendorIdentifier = "ZUORA"
	VendorIdentifierStripe         VendorIdentifier = "STRIPE"
	VendorIdentifierHubspot        VendorIdentifier = "HUBSPOT"
	VendorIdentifierAWSMarketplace VendorIdentifier = "AWS_MARKETPLACE"
	VendorIdentifierSnowflake      VendorIdentifier = "SNOWFLAKE"
	VendorIdentifierSalesforce     VendorIdentifier = "SALESFORCE"
	VendorIdentifierBigQuery       VendorIdentifier = "BIG_QUERY"
	VendorIdentifierOpenFga        VendorIdentifier = "OPEN_FGA"
)

var AllVendorIdentifier = []VendorIdentifier{
	VendorIdentifierAuth0,
	VendorIdentifierZuora,
	VendorIdentifierStripe,
	VendorIdentifierHubspot,
	VendorIdentifierAWSMarketplace,
	VendorIdentifierSnowflake,
	VendorIdentifierSalesforce,
	VendorIdentifierBigQuery,
	VendorIdentifierOpenFga,
}

func (e VendorIdentifier) IsValid() bool {
	switch e {
	case VendorIdentifierAuth0, VendorIdentifierZuora, VendorIdentifierStripe, VendorIdentifierHubspot, VendorIdentifierAWSMarketplace, VendorIdentifierSnowflake, VendorIdentifierSalesforce, VendorIdentifierBigQuery, VendorIdentifierOpenFga:
		return true
	}
	return false
}

func (e VendorIdentifier) String() string {
	return string(e)
}

func (e *VendorIdentifier) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VendorIdentifier(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VendorIdentifier", str)
	}
	return nil
}

func (e VendorIdentifier) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of integration
type VendorType string

const (
	// Billing integration type
	VendorTypeBilling VendorType = "BILLING"
	// CRM integration type
	VendorTypeCrm VendorType = "CRM"
	// Data export integration type
	VendorTypeDataExport VendorType = "DATA_EXPORT"
	// Authentication integration type
	VendorTypeAuth VendorType = "AUTH"
	// Marketplace integration type
	VendorTypeMarketplace VendorType = "MARKETPLACE"
)

var AllVendorType = []VendorType{
	VendorTypeBilling,
	VendorTypeCrm,
	VendorTypeDataExport,
	VendorTypeAuth,
	VendorTypeMarketplace,
}

func (e VendorType) IsValid() bool {
	switch e {
	case VendorTypeBilling, VendorTypeCrm, VendorTypeDataExport, VendorTypeAuth, VendorTypeMarketplace:
		return true
	}
	return false
}

func (e VendorType) String() string {
	return string(e)
}

func (e *VendorType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VendorType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VendorType", str)
	}
	return nil
}

func (e VendorType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Weekly reset period according to configuration
type WeeklyAccordingTo string

const (
	WeeklyAccordingToSubscriptionStart WeeklyAccordingTo = "SubscriptionStart"
	WeeklyAccordingToEverySunday       WeeklyAccordingTo = "EverySunday"
	WeeklyAccordingToEveryMonday       WeeklyAccordingTo = "EveryMonday"
	WeeklyAccordingToEveryTuesday      WeeklyAccordingTo = "EveryTuesday"
	WeeklyAccordingToEveryWednesday    WeeklyAccordingTo = "EveryWednesday"
	WeeklyAccordingToEveryThursday     WeeklyAccordingTo = "EveryThursday"
	WeeklyAccordingToEveryFriday       WeeklyAccordingTo = "EveryFriday"
	WeeklyAccordingToEverySaturday     WeeklyAccordingTo = "EverySaturday"
)

var AllWeeklyAccordingTo = []WeeklyAccordingTo{
	WeeklyAccordingToSubscriptionStart,
	WeeklyAccordingToEverySunday,
	WeeklyAccordingToEveryMonday,
	WeeklyAccordingToEveryTuesday,
	WeeklyAccordingToEveryWednesday,
	WeeklyAccordingToEveryThursday,
	WeeklyAccordingToEveryFriday,
	WeeklyAccordingToEverySaturday,
}

func (e WeeklyAccordingTo) IsValid() bool {
	switch e {
	case WeeklyAccordingToSubscriptionStart, WeeklyAccordingToEverySunday, WeeklyAccordingToEveryMonday, WeeklyAccordingToEveryTuesday, WeeklyAccordingToEveryWednesday, WeeklyAccordingToEveryThursday, WeeklyAccordingToEveryFriday, WeeklyAccordingToEverySaturday:
		return true
	}
	return false
}

func (e WeeklyAccordingTo) String() string {
	return string(e)
}

func (e *WeeklyAccordingTo) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WeeklyAccordingTo(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WeeklyAccordingTo", str)
	}
	return nil
}

func (e WeeklyAccordingTo) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The widget type
type WidgetType string

const (
	WidgetTypePaywall        WidgetType = "PAYWALL"
	WidgetTypeCustomerPortal WidgetType = "CUSTOMER_PORTAL"
	WidgetTypeCheckout       WidgetType = "CHECKOUT"
)

var AllWidgetType = []WidgetType{
	WidgetTypePaywall,
	WidgetTypeCustomerPortal,
	WidgetTypeCheckout,
}

func (e WidgetType) IsValid() bool {
	switch e {
	case WidgetTypePaywall, WidgetTypeCustomerPortal, WidgetTypeCheckout:
		return true
	}
	return false
}

func (e WidgetType) String() string {
	return string(e)
}

func (e *WidgetType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WidgetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WidgetType", str)
	}
	return nil
}

func (e WidgetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Yearly reset period according to configuration
type YearlyAccordingTo string

const (
	YearlyAccordingToSubscriptionStart YearlyAccordingTo = "SubscriptionStart"
)

var AllYearlyAccordingTo = []YearlyAccordingTo{
	YearlyAccordingToSubscriptionStart,
}

func (e YearlyAccordingTo) IsValid() bool {
	switch e {
	case YearlyAccordingToSubscriptionStart:
		return true
	}
	return false
}

func (e YearlyAccordingTo) String() string {
	return string(e)
}

func (e *YearlyAccordingTo) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = YearlyAccordingTo(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid YearlyAccordingTo", str)
	}
	return nil
}

func (e YearlyAccordingTo) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The group of the experiment
type ExperimentGroupType string

const (
	ExperimentGroupTypeControl ExperimentGroupType = "CONTROL"
	ExperimentGroupTypeVariant ExperimentGroupType = "VARIANT"
)

var AllExperimentGroupType = []ExperimentGroupType{
	ExperimentGroupTypeControl,
	ExperimentGroupTypeVariant,
}

func (e ExperimentGroupType) IsValid() bool {
	switch e {
	case ExperimentGroupTypeControl, ExperimentGroupTypeVariant:
		return true
	}
	return false
}

func (e ExperimentGroupType) String() string {
	return string(e)
}

func (e *ExperimentGroupType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExperimentGroupType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid experimentGroupType", str)
	}
	return nil
}

func (e ExperimentGroupType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
